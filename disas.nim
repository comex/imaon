
import armtypes, armfuncs, types, funcs
import allAC
include "ltgt"
template ctxspec(TAsmCtx : typedesc, TVal : typedesc, TRVal : typedesc) =
  proc processInsn16*(ctx : TAsmCtx, insn : TBinary, t : TInsnFlags) : TVal =
    # []
    if bit(insn, 15):
      # [(15, 1)]
      if bit(insn, 14):
        # [(15, 1), (14, 1)]
        if bit(insn, 13):
          # [(15, 1), (14, 1), (13, 1)]
          if not bit(insn, 12):
            # [(15, 1), (14, 1), (13, 1), (12, 0)]
            if not bit(insn, 11):
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10048b248>
              #B<c> <label>
              #(1, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm11 : TBinary = insn[10,0]
                return ctx.opB({}, <(sxt(cat(imm11, b"0"))))
                nil
        else: #13
          # [(15, 1), (14, 1), (13, 0)]
          if bit(insn, 12):
            # [(15, 1), (14, 1), (13, 0), (12, 1)]
            if bit(insn, 11):
              # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1)]
              if bit(insn, 10):
                # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1)]
                if bit(insn, 9):
                  # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1)]
                  if bit(insn, 8):
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x1004af4d0>
                    #SVC<c> #<imm8>
                    #(1, 1, 0, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                    block:
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opSVC({}, <imm8)
                      nil
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
            # [(15, 1), (14, 1), (13, 0), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
            #i: <__main__.instruction instance at 0x10048b1b8>
            #B<c> <label>
            #(1, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None)
            block:
              var cond : TBinary = insn[11,8]
              var imm8 : TBinary = insn[7,0]
              return ctx.opB(fromCond(cond), <(sxt(cat(imm8, b"0"))))
              nil
          else: #12
            # [(15, 1), (14, 1), (13, 0), (12, 0)]
            if bit(insn, 11):
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004919e0>
              #LDM<c> <Rn>,<registers> <Rn> included in <registers>
              #(1, 1, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rn : TReg = TReg(insn[10,8].num)
                var register_list : TBinary = insn[7,0]
                var rl = cat(b"00000000", register_list)
                if rl[int(Rn)].bit:
                    #rl = rl.bclear(int(rn))
                    return ctx.opLDM({}, <Rn, ctx.RegList(rl))
                else:
                    return ctx.opLDMIA({}, >Rn, ctx.RegList(rl))
                nil
            else: #11
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 1), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004a8b00>
              #STM<c> <Rn>!,<registers>
              #(1, 1, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rn : TReg = TReg(insn[10,8].num)
                var register_list : TBinary = insn[7,0]
                var rl = cat(b"00000000", register_list)
                if rl[int(Rn)].bit:
                    return ctx.opSTM({}, <Rn, ctx.RegList(rl))
                else:
                    return ctx.opSTMIA({}, >Rn, ctx.RegList(rl))
                nil
      else: #14
        # [(15, 1), (14, 0)]
        if bit(insn, 13):
          # [(15, 1), (14, 0), (13, 1)]
          if bit(insn, 12):
            # [(15, 1), (14, 0), (13, 1), (12, 1)]
            if bit(insn, 11):
              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1)]
              if bit(insn, 10):
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1)]
                if bit(insn, 9):
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1)]
                  if bit(insn, 8):
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1)]
                    if not bit(insn, 7):
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1)]
                        if not bit(insn, 5):
                          # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0)]
                          if not bit(insn, 4):
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0)]
                            if not bit(insn, 3):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 0)]
                              if not bit(insn, 2):
                                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 0), (2, 0)]
                                if not bit(insn, 1):
                                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0)]
                                  if not bit(insn, 0):
                                    #i: <__main__.instruction instance at 0x1004a86c8>
                                    #SEV<c>
                                    #(1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0)
                                    block:
                                      return ctx.opSEV({})
                                      nil
                      else: #6
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0)]
                        if bit(insn, 5):
                          # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1)]
                          if bit(insn, 4):
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 1)]
                            if not bit(insn, 3):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 1), (3, 0)]
                              if not bit(insn, 2):
                                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 1), (3, 0), (2, 0)]
                                if not bit(insn, 1):
                                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 1), (3, 0), (2, 0), (1, 0)]
                                  if not bit(insn, 0):
                                    #i: <__main__.instruction instance at 0x1004b44d0>
                                    #WFI<c>
                                    #(1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0)
                                    block:
                                      return ctx.opWFI({})
                                      nil
                          else: #4
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0)]
                            if not bit(insn, 3):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 0)]
                              if not bit(insn, 2):
                                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 0), (2, 0)]
                                if not bit(insn, 1):
                                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 0), (2, 0), (1, 0)]
                                  if not bit(insn, 0):
                                    #i: <__main__.instruction instance at 0x1004b43b0>
                                    #WFE<c>
                                    #(1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0)
                                    block:
                                      return ctx.opWFE({})
                                      nil
                        else: #5
                          # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0)]
                          if bit(insn, 4):
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 1)]
                            if not bit(insn, 3):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 1), (3, 0)]
                              if not bit(insn, 2):
                                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 1), (3, 0), (2, 0)]
                                if not bit(insn, 1):
                                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 1), (3, 0), (2, 0), (1, 0)]
                                  if not bit(insn, 0):
                                    #i: <__main__.instruction instance at 0x1004b45f0>
                                    #YIELD<c>
                                    #(1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0)
                                    block:
                                      return ctx.opYIELD({})
                                      nil
                          else: #4
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 0)]
                            if not bit(insn, 3):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0)]
                              if not bit(insn, 2):
                                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 0)]
                                if not bit(insn, 1):
                                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0)]
                                  if not bit(insn, 0):
                                    #i: <__main__.instruction instance at 0x10049ddd0>
                                    #NOP<c>
                                    #(1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0)
                                    block:
                                      return ctx.opNOP({})
                                      nil
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x100491710>
                    #IT{x{y{z}}} <firstcond>
                    #(1, 0, 1, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                    block:
                      var firstcond : TBinary = insn[7,4]
                      var mask : TBinary = insn[3,0]
                      # Yuk.  This will need special care.
                      if mask == b"0000": break
                      return ctx.opIT(fromCond(firstcond), ctx.ITarg(parseIT(TCond(firstcond.num), mask)))
                      nil
                  else: #8
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10048b758>
                    #BKPT #<imm8>
                    #(1, 0, 1, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                    block:
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opBKPT({}, <imm8)
                      nil
                else: #9
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004a0830>
                  #POP<c> <registers>
                  #(1, 0, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var P : TBinary = insn[8,8]
                    var register_list : TBinary = insn[7,0]
                    return ctx.opLDMIA({}, >SP, ctx.RegList(cat(P, b"0000000", register_list)))
                    nil
              else: #10
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0)]
                if bit(insn, 9):
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1)]
                  if not bit(insn, 8):
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a0d88>
                        #REVSH<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 1, 0, 1, 0, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opREVSH({}, >Rd, <Rm)
                          nil
                    else: #7
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a0c68>
                        #REV16<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 1, 0, 1, 0, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opREV16({}, >Rd, <Rm)
                          nil
                      else: #6
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 1), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a0b48>
                        #REV<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 1, 0, 1, 0, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opREV({}, >Rd, <Rm)
                          nil
            else: #11
              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0)]
              if bit(insn, 10):
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1)]
                if bit(insn, 9):
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1)]
                  if not bit(insn, 8):
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0)]
                    if not bit(insn, 7):
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1)]
                        if bit(insn, 5):
                          # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1), (5, 1)]
                          # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1), (5, 1), (4, 2)]
                          if not bit(insn, 3):
                            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1), (5, 1), (4, 2), (3, 0)]
                            if not bit(insn, 2):
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1), (5, 1), (4, 2), (3, 0), (2, 0)]
                              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 1), (8, 0), (7, 0), (6, 1), (5, 1), (4, 2), (3, 0), (2, 0), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004911b8>
                              #CPS<effect> <iflags>
                              #(1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, None, 0, 0, None, None)
                              block:
                                var im : TBinary = insn[4,4]
                                var I : TBinary = insn[1,1]
                                var F : TBinary = insn[0,0]
                                #nil # see B4-2
                                return ctx.opCPS(if not im.bit: {ifCPSIE} else: {}, ctx.CPSarg(I.bit, F.bit))
                                nil
                else: #9
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004a0950>
                  #PUSH<c> <registers>
                  #(1, 0, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var M : TBinary = insn[8,8]
                    var register_list : TBinary = insn[7,0]
                    return ctx.opSTMIA({}, >SP, ctx.RegList(cat(b"0", M, b"0000000", register_list)))
                    nil
              else: #10
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0)]
                if bit(insn, 9):
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1)]
                  if not bit(insn, 8):
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004b40e0>
                        #UXTB<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 0, 0, 1, 0, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opUXTB({}, <Rd, <Rm)
                          nil
                      else: #6
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004b4248>
                        #UXTH<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 0, 0, 1, 0, 1, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opUXTH({}, >Rd, <Rm)
                          nil
                    else: #7
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004af638>
                        #SXTB<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 0, 0, 1, 0, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opSXTB({}, <Rd, <Rm)
                          nil
                      else: #6
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004af7a0>
                        #SXTH<c> <Rd>,<Rm>
                        #(1, 0, 1, 1, 0, 0, 1, 0, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opSXTH({}, >Rd, <Rm)
                          nil
                else: #9
                  # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0)]
                  if not bit(insn, 8):
                    # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004af200>
                      #SUB<c> SP,SP,#<imm7>
                      #(1, 0, 1, 1, 0, 0, 0, 0, 1, None, None, None, None, None, None, None)
                      block:
                        var imm7 : TBinary = insn[6,0]
                        return ctx.opSUB({}, >SP, <SP, <cat(imm7, b"00"))
                        nil
                    else: #7
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2), (5, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2), (5, 2), (4, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10043c7a0>
                      #ADD<c> SP,SP,#<imm7>
                      #(1, 0, 1, 1, 0, 0, 0, 0, 0, None, None, None, None, None, None, None)
                      block:
                        var imm7 : TBinary = insn[6,0]
                        return ctx.opADD({}, >SP, <SP, <cat(imm7, b"00"))
                        nil
            # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2)]
            if not bit(insn, 10):
              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0)]
              # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2)]
              if bit(insn, 8):
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2), (5, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                # [(15, 1), (14, 0), (13, 1), (12, 1), (11, 2), (10, 0), (9, 2), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                #i: <__main__.instruction instance at 0x10048ba28>
                #CB{N}Z <Rn>,<label>
                #(1, 0, 1, 1, None, 0, None, 1, None, None, None, None, None, None, None, None)
                block:
                  var op : TBinary = insn[11,11]
                  var i : TBinary = insn[9,9]
                  var imm5 : TBinary = insn[7,3]
                  var Rn : TReg = TReg(insn[2,0].num)
                  var arg = <cat(i, imm5, b"0")
                  if op.bit:
                      return ctx.opCBNZ({}, <Rn, arg)
                  else:
                      return ctx.opCBZ({}, <Rn, arg)
                  nil
          else: #12
            # [(15, 1), (14, 0), (13, 1), (12, 0)]
            if bit(insn, 11):
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10043c7e8>
              #ADD<c> <Rd>,SP,#<imm8>
              #(1, 0, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rd : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opADD({}, >Rd, <SP, <cat(imm8, b"00"))
                nil
            else: #11
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10043cab8>
              #ADR<c> <Rd>,<label>
              #(1, 0, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rd : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opADR({}, >Rd, <PC, <(cat(imm8, b"00").num))
                nil
        else: #13
          # [(15, 1), (14, 0), (13, 0)]
          if bit(insn, 12):
            # [(15, 1), (14, 0), (13, 0), (12, 1)]
            if bit(insn, 11):
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100491cf8>
              #LDR<c> <Rt>,[SP{,#<imm8>}]
              #(1, 0, 0, 1, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rt : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opLDR({}, >Rt, ctx.Deref(>SP, <cat(imm8, b"00"), 4, true, false, true))
                nil
            else: #11
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004a8dd0>
              #STR<c> <Rt>,[SP,#<imm8>]
              #(1, 0, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rt : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opSTR({}, <Rt, ctx.Deref(>SP, <cat(imm8, b"00"), 4, true, false, true))
                nil
          else: #12
            # [(15, 1), (14, 0), (13, 0), (12, 0)]
            if bit(insn, 11):
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100495a28>
              #LDRH<c> <Rt>,[<Rn>{,#<imm5>}]
              #(1, 0, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opLDRH({}, >Rt, ctx.Deref(>Rn, <cat(imm5, b"0"), 2, true, false, true))
                nil
            else: #11
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004ab908>
              #STRH<c> <Rt>,[<Rn>{,#<imm5>}]
              #(1, 0, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opSTRH({}, <Rt, ctx.Deref(>Rn, <cat(imm5, b"0"), 2, true, false, true))
                nil
    else: #15
      # [(15, 0)]
      if bit(insn, 14):
        # [(15, 0), (14, 1)]
        if bit(insn, 13):
          # [(15, 0), (14, 1), (13, 1)]
          if bit(insn, 12):
            # [(15, 0), (14, 1), (13, 1), (12, 1)]
            if bit(insn, 11):
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100495200>
              #LDRB<c> <Rt>,[<Rn>{,#<imm5>}]
              #(0, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opLDRB({}, >Rt, ctx.Deref(>Rn, <imm5, 1, true, false, true))
                nil
            else: #11
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004ab1b8>
              #STRB<c> <Rt>,[<Rn>,#<imm5>]
              #(0, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opSTRB({}, <Rt, ctx.Deref(>Rn, <imm5, 1, true, false, true))
                nil
          else: #12
            # [(15, 0), (14, 1), (13, 1), (12, 0)]
            if bit(insn, 11):
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100491b90>
              #LDR<c> <Rt>, [<Rn>{,#<imm5>}]
              #(0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opLDR({}, >Rt, ctx.Deref(>Rn, <cat(imm5, b"00"), 4, true, false, true))
                nil
            else: #11
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 1), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004a8d40>
              #STR<c> <Rt>, [<Rn>{,#<imm5>}]
              #(0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rn : TReg = TReg(insn[5,3].num)
                var Rt : TReg = TReg(insn[2,0].num)
                return ctx.opSTR({}, <Rt, ctx.Deref(>Rn, <cat(imm5, b"00"), 4, true, false, true))
                nil
        else: #13
          # [(15, 0), (14, 1), (13, 0)]
          if bit(insn, 12):
            # [(15, 0), (14, 1), (13, 0), (12, 1)]
            if bit(insn, 11):
              # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1)]
              if bit(insn, 10):
                # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100499638>
                  #LDRSH<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opLDRSH({}, >Rt, ctx.Deref(<Rn, <Rm, 2, true, false, true))
                    nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100495488>
                  #LDRB<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opLDRB({}, >Rt, ctx.Deref(>Rn, <Rm, 1, true, false, true))
                    nil
              else: #10
                # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100495cb0>
                  #LDRH<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opLDRH({}, >Rt, ctx.Deref(<Rn, <Rm, 2, true, false, true))
                    nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100495050>
                  #LDR<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opLDR({}, >Rt, ctx.Deref(>Rn, <Rm, 4, true, false, true))
                    nil
            else: #11
              # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0)]
              if bit(insn, 10):
                # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004991b8>
                  #LDRSB<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 0, 1, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opLDRSB({}, >Rt, ctx.Deref(>Rn, <Rm, 1, true, false, true))
                    nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004ab3b0>
                  #STRB<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opSTRB({}, <Rt, ctx.Deref(>Rn, <Rm, 1, true, false, true))
                    nil
              else: #10
                # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004abb00>
                  #STRH<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 0, 0, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    if Rt == PC: break
                    return ctx.opSTRH({}, <Rt, ctx.Deref(<Rn, <Rm, 2, true, false, true))
                    nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 1), (13, 0), (12, 1), (11, 0), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004ab050>
                  #STR<c> <Rt>,[<Rn>,<Rm>]
                  #(0, 1, 0, 1, 0, 0, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rt : TReg = TReg(insn[2,0].num)
                    return ctx.opSTR({}, <Rt, ctx.Deref(>Rn, <Rm, 4, true, false, true))
                    nil
          else: #12
            # [(15, 0), (14, 1), (13, 0), (12, 0)]
            if bit(insn, 11):
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100491ef0>
              #LDR<c> <Rt>,<label>
              #(0, 1, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rt : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opLDR({}, >Rt, ctx.Deref(>PC, <cat(imm8, b"00"), 4, true, false, true))
                nil
            else: #11
              # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0)]
              if bit(insn, 10):
                # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1)]
                  if bit(insn, 8):
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2), (5, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2), (5, 2), (4, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2)]
                      if not bit(insn, 2):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 0)]
                        if not bit(insn, 1):
                          # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 0), (1, 0)]
                          if not bit(insn, 0):
                            #i: <__main__.instruction instance at 0x10048b878>
                            #BLX<c> <Rm>
                            #(0, 1, 0, 0, 0, 1, 1, 1, 1, None, None, None, None, 0, 0, 0)
                            block:
                              var Rm : TReg = TReg(insn[6,3].num)
                              return ctx.opBLX({}, <Rm)
                              nil
                    else: #7
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2), (5, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2), (5, 2), (4, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2)]
                      if not bit(insn, 2):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2), (2, 0)]
                        if not bit(insn, 1):
                          # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 1), (7, 0), (6, 2), (5, 2), (4, 2), (3, 2), (2, 0), (1, 0)]
                          if not bit(insn, 0):
                            #i: <__main__.instruction instance at 0x10048b908>
                            #BX<c> <Rm>
                            #(0, 1, 0, 0, 0, 1, 1, 1, 0, None, None, None, None, 0, 0, 0)
                            block:
                              var Rm : TReg = TReg(insn[6,3].num)
                              return ctx.opBX({}, <Rm)
                              nil
                  else: #8
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10049d488>
                    #MOV<c> <Rd>,<Rm>
                    #(0, 1, 0, 0, 0, 1, 1, 0, None, None, None, None, None, None, None, None)
                    block:
                      var D : TBinary = insn[7,7]
                      var Rm : TReg = TReg(insn[6,3].num)
                      var Rd : TReg = TReg(insn[2,0].num)
                      return ctx.opMOV(t, >Rd, <Rm)
                      nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0)]
                  if bit(insn, 8):
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2), (5, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x100491098>
                    #CMP<c> <Rn>,<Rm>
                    #(0, 1, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None)
                    block:
                      var N : TBinary = insn[7,7]
                      var Rm : TReg = TReg(insn[6,3].num)
                      var Rn : TReg = TReg(insn[2,0].num)
                      if N.bit: Rn = rshift(Rn)
                      return ctx.opCMP({}, <Rn, <Rm)
                      nil
                  else: #8
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2)]
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2)]
                      if bit(insn, 2):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 1)]
                        if not bit(insn, 1):
                          # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 1), (6, 2), (5, 2), (4, 2), (3, 2), (2, 1), (1, 0)]
                          if bit(insn, 0):
                            #i: <__main__.instruction instance at 0x10043ca28>
                            #ADD<c> SP,<Rm>
                            #(0, 1, 0, 0, 0, 1, 0, 0, 1, None, None, None, None, 1, 0, 1)
                            block:
                              var Rm : TReg = TReg(insn[6,3].num)
                              return ctx.opADD({}, >SP, <SP, <Rm)
                              nil
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2)]
                    if bit(insn, 6):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1)]
                      if bit(insn, 5):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1), (5, 1)]
                        if not bit(insn, 4):
                          # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1), (5, 1), (4, 0)]
                          if bit(insn, 3):
                            # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1), (5, 1), (4, 0), (3, 1)]
                            # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1), (5, 1), (4, 0), (3, 1), (2, 2)]
                            # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 1), (5, 1), (4, 0), (3, 1), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x10043c998>
                            #ADD<c> <Rdm>, SP, <Rdm>
                            #(0, 1, 0, 0, 0, 1, 0, 0, None, 1, 1, 0, 1, None, None, None)
                            block:
                              var DM : TBinary = insn[7,7]
                              var Rdm : TReg = TReg(insn[2,0].num)
                              if DM.bit: Rdm = rshift(Rdm)
                              return ctx.opADD({}, >Rdm, <SP, <Rdm)
                              nil
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10043c758>
                    #ADD<c> <Rdn>,<Rm>
                    #(0, 1, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None)
                    block:
                      var DN : TBinary = insn[7,7]
                      var Rm : TReg = TReg(insn[6,3].num)
                      var Rdn : TReg = TReg(insn[2,0].num)
                      if DN.bit: Rdn = rshift(Rdn)
                      if Rdn == SP or Rm == SP: break
                      return ctx.opADD({}, >Rdn, <Rdn, <Rm)
                      nil
              else: #10
                # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0)]
                if bit(insn, 9):
                  # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1)]
                  if bit(insn, 8):
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10049dc68>
                        #MVN<c> <Rd>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 1, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opMVN(t, >Rd, <Rm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10048b6c8>
                        #BIC<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 1, 1, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opBIC({}, >Rdn, <Rdn, <Rm)
                          nil
                    else: #7
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10049dab8>
                        #MUL<c> <Rdm>,<Rn>,<Rdm>
                        #(0, 1, 0, 0, 0, 0, 1, 1, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[5,3].num)
                          var Rdm : TReg = TReg(insn[2,0].num)
                          return ctx.opMUL(t, >Rdm, <Rn, <Rdm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a0170>
                        #ORR<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 1, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opORR(t, >Rdn, <Rdn, <Rm)
                          nil
                  else: #8
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10048bd88>
                        #CMN<c> <Rn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 0, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rn : TReg = TReg(insn[2,0].num)
                          return ctx.opCMN({ifS}, >Rn, <Rm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100491050>
                        #CMP<c> <Rn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 0, 1, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rn : TReg = TReg(insn[2,0].num)
                          return ctx.opCMP({ifS}, <Rn, <Rm)
                          nil
                    else: #7
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a8170>
                        #RSB<c> <Rd>,<Rn>,#0
                        #(0, 1, 0, 0, 0, 0, 1, 0, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opRSB(t, >Rd, <Rn, <0)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 1), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004afb90>
                        #TST<c> <Rn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 1, 0, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rn : TReg = TReg(insn[2,0].num)
                          return ctx.opTST({ifS}, <Rn, <Rm)
                          nil
                else: #9
                  # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0)]
                  if bit(insn, 8):
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a0f38>
                        #ROR<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 1, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opROR(t, >Rdn, <Rdn, <Rm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a8440>
                        #SBC<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 1, 1, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opSBC(t, >Rdn, <Rdn, <Rm)
                          nil
                    else: #7
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10043c320>
                        #ADC<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opADC(t, >Rdn, <Rdn, <Rm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 1), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10048b098>
                        #ASR<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          #return ctx.opASR({}, Rdn, Rdn, Rm)
                          nil
                  else: #8
                    # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0)]
                    if bit(insn, 7):
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100499d88>
                        #LSR<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 0, 1, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opLSR(t, >Rdn, ctx.Shift(<Rdn, LSR, <Rm))
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100499ab8>
                        #LSL<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 0, 1, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opLSL(t, >Rdn, ctx.Shift(<Rdn, LSL, <Rm))
                          nil
                    else: #7
                      # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                      if bit(insn, 6):
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 1), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100491560>
                        #EOR<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 0, 0, 1, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opEOR(t, >Rdn, <Rdn, <Rm)
                          nil
                      else: #6
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 1), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10043cdd0>
                        #AND<c> <Rdn>,<Rm>
                        #(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rdn : TReg = TReg(insn[2,0].num)
                          return ctx.opAND(t, >Rdn, <Rdn, <Rm)
                          nil
      else: #14
        # [(15, 0), (14, 0)]
        if bit(insn, 13):
          # [(15, 0), (14, 0), (13, 1)]
          if bit(insn, 12):
            # [(15, 0), (14, 0), (13, 1), (12, 1)]
            if bit(insn, 11):
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004abea8>
              #SUB<c> <Rdn>,#<imm8>
              #(0, 0, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rdn : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opSUB(t, >Rdn, <Rdn, <imm8)
                nil
            else: #11
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10043c3f8>
              #ADD<c> <Rdn>,#<imm8>
              #(0, 0, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rdn : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opADD(t, >Rdn, <Rdn, <imm8)
                nil
          else: #12
            # [(15, 0), (14, 0), (13, 1), (12, 0)]
            if bit(insn, 11):
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10048be60>
              #CMP<c> <Rn>,#<imm8>
              #(0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rn : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opCMP({ifS}, <Rn, <imm8)
                nil
            else: #11
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 1), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10049d2d8>
              #MOV<c> <Rd>,#<imm8>
              #(0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var Rd : TReg = TReg(insn[10,8].num)
                var imm8 : TBinary = insn[7,0]
                return ctx.opMOV(t, >Rd, <imm8)
                nil
        else: #13
          # [(15, 0), (14, 0), (13, 0)]
          if bit(insn, 12):
            # [(15, 0), (14, 0), (13, 0), (12, 1)]
            if bit(insn, 11):
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1)]
              if bit(insn, 10):
                # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1)]
                if bit(insn, 9):
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004abe60>
                  #SUB<c> <Rd>,<Rn>,#<imm3>
                  #(0, 0, 0, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var imm3 : TBinary = insn[8,6]
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rd : TReg = TReg(insn[2,0].num)
                    return ctx.opSUB(t, >Rd, <Rn, <imm3)
                    nil
                else: #9
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 1), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x10043c248>
                  #ADD<c> <Rd>,<Rn>,#<imm3>
                  #(0, 0, 0, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var imm3 : TBinary = insn[8,6]
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rd : TReg = TReg(insn[2,0].num)
                    return ctx.opADD(t, >Rd, <Rn, <imm3)
                    nil
              else: #10
                # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0)]
                if bit(insn, 9):
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 1), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x1004af0e0>
                  #SUB<c> <Rd>,<Rn>,<Rm>
                  #(0, 0, 0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rd : TReg = TReg(insn[2,0].num)
                    return ctx.opSUB(t, >Rd, <Rn, <Rm)
                    nil
                else: #9
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                  # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 1), (10, 0), (9, 0), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x10043c710>
                  #ADD<c> <Rd>,<Rn>,<Rm>
                  #(0, 0, 0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None)
                  block:
                    var Rm : TReg = TReg(insn[8,6].num)
                    var Rn : TReg = TReg(insn[5,3].num)
                    var Rd : TReg = TReg(insn[2,0].num)
                    return ctx.opADD(t, >Rd, <Rn, <Rm)
                    nil
            else: #11
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 1), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10043ce60>
              #ASR<c> <Rd>,<Rm>,#<imm5>
              #(0, 0, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rm : TReg = TReg(insn[5,3].num)
                var Rd : TReg = TReg(insn[2,0].num)
                #return ctx.opASR(t, Rd, Rd, ctx.DIShift(>Rm, b"10", imm5))
                nil
          else: #12
            # [(15, 0), (14, 0), (13, 0), (12, 0)]
            if bit(insn, 11):
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100499bd8>
              #LSR<c> <Rd>,<Rm>,#<imm5>
              #(0, 0, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rm : TReg = TReg(insn[5,3].num)
                var Rd : TReg = TReg(insn[2,0].num)
                return ctx.opLSR(t, >Rd, ctx.Shift(<Rm, LSR, <imm5))
                nil
            else: #11
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0)]
              if not bit(insn, 10):
                # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0)]
                if not bit(insn, 9):
                  # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0)]
                  if not bit(insn, 8):
                    # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0)]
                    if not bit(insn, 7):
                      # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                      if not bit(insn, 6):
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x10049d5a8>
                        #MOVS <Rd>,<Rm> (formerly LSL <Rd>,<Rm>,#0)
                        #(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                        block:
                          var Rm : TReg = TReg(insn[5,3].num)
                          var Rd : TReg = TReg(insn[2,0].num)
                          return ctx.opMOV({}, >Rd, <Rm)
                          nil
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(15, 0), (14, 0), (13, 0), (12, 0), (11, 0), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100499908>
              #LSL<c> <Rd>,<Rm>,#<imm5>
              #(0, 0, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var imm5 : TBinary = insn[10,6]
                var Rm : TReg = TReg(insn[5,3].num)
                var Rd : TReg = TReg(insn[2,0].num)
                # DIShift with b"00" is just a LSL
                return ctx.opLSL(t, >Rd, ctx.Shift(<Rm, LSL, <imm5))
                nil


  proc processInsn32*(ctx : TAsmCtx, insn : TBinary, t : TInsnFlags) : TVal =
    # []
    if bit(insn, 28):
      # [(28, 1)]
      if bit(insn, 27):
        # [(28, 1), (27, 1)]
        if bit(insn, 26):
          # [(28, 1), (27, 1), (26, 1)]
          if bit(insn, 25):
            # [(28, 1), (27, 1), (26, 1), (25, 1)]
            if not bit(insn, 24):
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2)]
              if bit(insn, 20):
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                if bit(insn, 4):
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x10049d7a0>
                  #MRC2<c> <coproc>,<opc1>,<Rt>,<CRn>,<CRm>{,<opc2>}
                  #(1, 1, 1, 1, 1, 1, 1, 0, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, None, None, None)
                  block:
                    var opc1 : TBinary = insn[23,21]
                    var CRn : TBinary = insn[19,16]
                    var Rt : TReg = TReg(insn[15,12].num)
                    var coproc : TBinary = insn[11,8]
                    var opc2 : TBinary = insn[7,5]
                    var CRm : TBinary = insn[3,0]
                    return ctx.opMRC2({}, <coproc, <opc1, >Rt, <Crn, <Crm, <opc2)
                    nil
              else: #20
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                if bit(insn, 4):
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2)]
                  # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100499f38>
                  #MCR2<c> <coproc>,<opc1>,<Rt>,<CRn>,<CRm>{,<opc2>}
                  #(1, 1, 1, 1, 1, 1, 1, 0, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, None, None, None)
                  block:
                    var opc1 : TBinary = insn[23,21]
                    var CRn : TBinary = insn[19,16]
                    var Rt : TReg = TReg(insn[15,12].num)
                    var coproc : TBinary = insn[11,8]
                    var opc2 : TBinary = insn[7,5]
                    var CRm : TBinary = insn[3,0]
                     # no check here!
                    return ctx.opMCR2({}, <coproc, <opc1, <Rt, <Crn, <Crm, <opc2)
                    nil
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              if not bit(insn, 4):
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2), (2, 2)]
                # [(28, 1), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2), (2, 2), (1, 2)]
                #i: <__main__.instruction instance at 0x10048bb00>
                #CDP2<c> <coproc>,<opc1>,<CRd>,<CRn>,<CRm>,<opc2>
                #(1, 1, 1, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 0, None, None, None, None)
                block:
                  var opc1 : TBinary = insn[23,20]
                  var CRn : TBinary = insn[19,16]
                  var CRd : TBinary = insn[15,12]
                  var coproc : TBinary = insn[11,8]
                  var opc2 : TBinary = insn[7,5]
                  var CRm : TBinary = insn[3,0]
                  return ctx.opCDP2({}, <coproc, <opc1, <CRd, <CRn, <CRm, <opc2)
                  nil
          else: #25
            # [(28, 1), (27, 1), (26, 1), (25, 0)]
            if not bit(insn, 24):
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0)]
              if not bit(insn, 23):
                # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049d8c0>
                      #MRRC2<c> <coproc>,<opc>,<Rt>,<Rt2>,<CRm>
                      #(1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rt2 : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var coproc : TBinary = insn[11,8]
                        var opc1 : TBinary = insn[7,4]
                        var CRm : TBinary = insn[3,0]
                        return ctx.opMRRC2({}, <coproc, <opc1, >Rt, >Rt2, <Crm)
                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049d098>
                      #MCRR2<c> <coproc>,<opc1>,<Rt>,<Rt2>,<CRm>
                      #(1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rt2 : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var coproc : TBinary = insn[11,8]
                        var opc1 : TBinary = insn[7,4]
                        var CRm : TBinary = insn[3,0]
                        return ctx.opMCRR2({}, <coproc, <opc1, <Rt, <Rt2, <CRm)
                        nil
            # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2)]
            # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2)]
            # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2)]
            # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2)]
            if bit(insn, 20):
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1)]
              if bit(insn, 19):
                # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1)]
                if bit(insn, 18):
                  # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1)]
                  if bit(insn, 17):
                    # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1)]
                    if bit(insn, 16):
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004918c0>
                      #LDC2{L}<c> <coproc>,<CRd>,[PC,#-0] Special case LDC{L}<c> <coproc>,<CRd>,[PC],<option>
                      #(1, 1, 1, 1, 1, 1, 0, None, None, None, None, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var P : TBinary = insn[24,24]
                        var U : TBinary = insn[23,23]
                        var D : TBinary = insn[22,22]
                        var W : TBinary = insn[21,21]
                        var CRd : TBinary = insn[15,12]
                        var coproc : TBinary = insn[11,8]
                        var imm8 : TBinary = insn[7,0]
                        
                        nil
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004917e8>
              #LDC2{L}<c> <coproc>,<CRd>,[<Rn>],<option>
              #(1, 1, 1, 1, 1, 1, 0, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var P : TBinary = insn[24,24]
                var U : TBinary = insn[23,23]
                var D : TBinary = insn[22,22]
                var W : TBinary = insn[21,21]
                var Rn : TReg = TReg(insn[19,16].num)
                var CRd : TBinary = insn[15,12]
                var coproc : TBinary = insn[11,8]
                var imm8 : TBinary = insn[7,0]
                if P == b"0" and W == b"0": break
                return ctx.opLDC2({}, <coproc, <CRd, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, P.bit, W.bit, U.bit))
                nil
            else: #20
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 1), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004a8a28>
              #STC2{L}<c> <coproc>,<CRd>,[<Rn>],<option>
              #(1, 1, 1, 1, 1, 1, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var P : TBinary = insn[24,24]
                var U : TBinary = insn[23,23]
                var N : TBinary = insn[22,22]
                var W : TBinary = insn[21,21]
                var Rn : TReg = TReg(insn[19,16].num)
                var CRd : TBinary = insn[15,12]
                var coproc : TBinary = insn[11,8]
                var imm8 : TBinary = insn[7,0]
                var D = N
                if not P.bit and not U.bit and D.bit and not W.bit: break
                return ctx.opSTC(if D.bit: {ifSTCL} else: {}, <coproc, <CRd, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, P.bit, W.bit, U.bit))
                nil
        else: #26
          # [(28, 1), (27, 1), (26, 0)]
          if bit(insn, 25):
            # [(28, 1), (27, 1), (26, 0), (25, 1)]
            if bit(insn, 24):
              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1)]
              if bit(insn, 23):
                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1)]
                if bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      if not bit(insn, 7):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                        if not bit(insn, 6):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                          if not bit(insn, 5):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                            if not bit(insn, 4):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004afe18>
                              #UMLAL<c> <RdLo>,<RdHi>,<Rn>,<Rm>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var RdLo : TBinary = insn[15,12]
                                var RdHi : TBinary = insn[11,8]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opUMLAL({}, >RdLo, >RdHi, <Rn, <Rm)
                                nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      if not bit(insn, 7):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                        if not bit(insn, 6):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                          if not bit(insn, 5):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                            if not bit(insn, 4):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004a87a0>
                              #SMLAL<c> <RdLo>,<RdHi>,<Rn>,<Rm>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var RdLo : TBinary = insn[15,12]
                                var RdHi : TBinary = insn[11,8]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opSMLAL({}, >RdLo, >RdHi, <Rn, <Rm)
                                nil
                else: #22
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              if bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                if bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1)]
                                  if bit(insn, 5):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1)]
                                    if bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004afcf8>
                                      #UDIV<c> <Rd>,<Rn>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm : TReg = TReg(insn[3,0].num)
                                        return ctx.opUDIV({}, >Rd, <Rn, <Rm)
                                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      if not bit(insn, 7):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                        if not bit(insn, 6):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                          if not bit(insn, 5):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                            if not bit(insn, 4):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004afef0>
                              #UMULL<c> <RdLo>,<RdHi>,<Rn>,<Rm>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var RdLo : TBinary = insn[15,12]
                                var RdHi : TBinary = insn[11,8]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opUMULL({}, >RdLo, >RdHi, <Rn, <Rm)
                                nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              if bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                if bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1)]
                                  if bit(insn, 5):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1)]
                                    if bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a85a8>
                                      #SDIV<c> <Rd>,<Rn>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm : TReg = TReg(insn[3,0].num)
                                        # XXX note about 0x80000000/0xffffffff
                                        return ctx.opSDIV({}, >Rd, <Rn, <Rm)
                                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      if not bit(insn, 7):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                        if not bit(insn, 6):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                          if not bit(insn, 5):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                            if not bit(insn, 4):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004a8878>
                              #SMULL<c> <RdLo>,<RdHi>,<Rn>,<Rm>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var RdLo : TBinary = insn[15,12]
                                var RdHi : TBinary = insn[11,8]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opSMULL({}, >RdLo, >RdHi, <Rn, <Rm)
                                nil
              else: #23
                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0)]
                if not bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0)]
                  if not bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                  if not bit(insn, 5):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                    if not bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x10049db00>
                                      #MUL<c> <Rd>,<Rn>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm : TReg = TReg(insn[3,0].num)
                                        return ctx.opMUL({}, >Rd, <Rn, <Rm)
                                        nil
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      if not bit(insn, 7):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                        if not bit(insn, 6):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                          if not bit(insn, 5):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                            if bit(insn, 4):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 1), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 1), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 1), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10049d248>
                              #MLS<c> <Rd>,<Rn>,<Rm>,<Ra>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 1, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Ra : TReg = TReg(insn[15,12].num)
                                var Rd : TReg = TReg(insn[11,8].num)
                                var Rm : TReg = TReg(insn[3,0].num)
                                # This does not affect /any/ flags.
                                return ctx.opMLA({}, >Rd, <Rn, <Rm, <Ra)
                                nil
                            else: #4
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10049d170>
                              #MLA<c> <Rd>,<Rn>,<Rm>,<Ra>
                              #(1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Ra : TReg = TReg(insn[15,12].num)
                                var Rd : TReg = TReg(insn[11,8].num)
                                var Rm : TReg = TReg(insn[3,0].num)
                                if Ra == PC: break
                                # TODO: This affects N and Z flags but not C, V
                                return ctx.opMLA({}, >Rd, <Rn, <Rm, <Ra)
                                nil
            else: #24
              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0)]
              if bit(insn, 23):
                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1)]
                if not bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              if bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                  if not bit(insn, 5):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0)]
                                    if not bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x10048bbd8>
                                      #CLZ<c> <Rd>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 0, 0, 0, None, None, None, None)
                                      block:
                                        var Rm : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm_P : TBinary = insn[3,0]
                                        return ctx.opCLZ({}, >Rd, <Rm)
                                        nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              if bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                  if bit(insn, 5):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1)]
                                    if bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 1), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 1), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a0cf8>
                                      #REVSH<c>.W <Rd>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 0, 1, 1, None, None, None, None)
                                      block:
                                        var Rm : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm_P : TBinary = insn[3,0]
                                        return ctx.opREVSH({}, >Rd, <Rm)
                                        nil
                                    else: #4
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 0)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 0), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 0), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 1), (4, 0), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a0a70>
                                      #RBIT<c> <Rd>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 0, 1, 0, None, None, None, None)
                                      block:
                                        var Rm : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm_P : TBinary = insn[3,0]
                                        return ctx.opRBIT({}, >Rd, <Rm)
                                        nil
                                  else: #5
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0)]
                                    if bit(insn, 4):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 1), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 1), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 1), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a0b90>
                                      #REV16<c>.W <Rd>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 0, 0, 1, None, None, None, None)
                                      block:
                                        var Rm : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm_P : TBinary = insn[3,0]
                                        return ctx.opREV16({}, >Rd, <Rm)
                                        nil
                                    else: #4
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a09e0>
                                      #REV<c>.W <Rd>,<Rm>
                                      #(1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 1, 0, 0, 0, None, None, None, None)
                                      block:
                                        var Rm : TReg = TReg(insn[19,16].num)
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var Rm_P : TBinary = insn[3,0]
                                        return ctx.opREV({}, >Rd, <Rm)
                                        nil
              else: #23
                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                            if not bit(insn, 7):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                              if not bit(insn, 6):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                if not bit(insn, 5):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                  if not bit(insn, 4):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x1004a0fc8>
                                    #ROR{S}<c>.W <Rd>,<Rn>,<Rm>
                                    #(1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, None, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                    block:
                                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                      var Rn : TReg = TReg(insn[19,16].num)
                                      var Rd : TReg = TReg(insn[11,8].num)
                                      var Rm : TReg = TReg(insn[3,0].num)
                                      return ctx.opROR(S, >Rd, ctx.Shift(<Rn, ROR, <Rm))
                                      nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if bit(insn, 14):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                  if bit(insn, 13):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                    if bit(insn, 12):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                      if bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004b4128>
                                          #UXTB<c>.W <Rd>,<Rm>{,<rotation>}
                                          #(1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, 1, 0, None, None, None, None, None, None)
                                          block:
                                            var Rd : TReg = TReg(insn[11,8].num)
                                            var rotate : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            return ctx.opUXTB({}, >Rd, ctx.Shift(<Rm, ROR, <cat(rotate, b"000")))
                                            nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if bit(insn, 14):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                  if bit(insn, 13):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                    if bit(insn, 12):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                      if bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004af680>
                                          #SXTB<c>.W <Rd>,<Rm>{,<rotation>}
                                          #(1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, 1, 0, None, None, None, None, None, None)
                                          block:
                                            var Rd : TReg = TReg(insn[11,8].num)
                                            var rotate : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            return ctx.opSXTB({}, >Rd, ctx.Shift(<Rm, ROR, <cat(rotate, b"000")))
                                            nil
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                            if not bit(insn, 7):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                              if not bit(insn, 6):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                if not bit(insn, 5):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                  if not bit(insn, 4):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x10048b128>
                                    #ASR{S}<c>.W <Rd>,<Rn>,<Rm>
                                    #(1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, None, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                    block:
                                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                      var Rn : TReg = TReg(insn[19,16].num)
                                      var Rd : TReg = TReg(insn[11,8].num)
                                      var Rm : TReg = TReg(insn[3,0].num)
                                      #return ctx.opASR(S, Rd, Rn, Rm)
                                      nil
                else: #22
                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                            if not bit(insn, 7):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                              if not bit(insn, 6):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                if not bit(insn, 5):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                  if not bit(insn, 4):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x100499e18>
                                    #LSR{S}<c>.W <Rd>,<Rn>,<Rm>
                                    #(1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, None, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                    block:
                                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                      var Rn : TReg = TReg(insn[19,16].num)
                                      var Rd : TReg = TReg(insn[11,8].num)
                                      var Rm : TReg = TReg(insn[3,0].num)
                                      return ctx.opLSR(S, >Rd, ctx.Shift(<Rn, LSR, <Rm))
                                      nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if bit(insn, 14):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                  if bit(insn, 13):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                    if bit(insn, 12):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                      if bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004b4290>
                                          #UXTH<c>.W <Rd>,<Rm>{,<rotation>}
                                          #(1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, 1, 0, None, None, None, None, None, None)
                                          block:
                                            var Rd : TReg = TReg(insn[11,8].num)
                                            var rotate : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            return ctx.opUXTH({}, >Rd, ctx.Shift(<Rm, ROR, <cat(rotate, b"000")))
                                            nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if bit(insn, 14):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                  if bit(insn, 13):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                    if bit(insn, 12):
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                      if bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 1), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004af7e8>
                                          #SXTH<c>.W <Rd>,<Rm>{,<rotation>}
                                          #(1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, 1, 0, None, None, None, None, None, None)
                                          block:
                                            var Rd : TReg = TReg(insn[11,8].num)
                                            var rotate : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            return ctx.opSXTH({}, >Rd, ctx.Shift(<Rm, ROR, <cat(rotate, b"000")))
                                            nil
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                            if not bit(insn, 7):
                              # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                              if not bit(insn, 6):
                                # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                if not bit(insn, 5):
                                  # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                  if not bit(insn, 4):
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x100499b48>
                                    #LSL{S}<c>.W <Rd>,<Rn>,<Rm>
                                    #(1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, None, None, None, None, None, 1, 1, 1, 1, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                    block:
                                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                      var Rn : TReg = TReg(insn[19,16].num)
                                      var Rd : TReg = TReg(insn[11,8].num)
                                      var Rm : TReg = TReg(insn[3,0].num)
                                      return ctx.opLSL(S, >Rd, ctx.Shift(<Rn, LSL, <Rm))
                                      nil
          else: #25
            # [(28, 1), (27, 1), (26, 0), (25, 0)]
            if bit(insn, 24):
              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1)]
              if bit(insn, 23):
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1)]
                if not bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004993f8>
                      #LDRSH<c> <Rt>,[<Rn>,#<imm12>]
                      #(1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opLDRSH({}, >Rt, ctx.Deref(>Rn, <imm12, 2, true, false, true))
                        nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004a0518>
                              #PLI<c> [<Rn>,#<imm12>]
                              #(1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var imm12 : TBinary = insn[11,0]
                                return ctx.opPLI({}, ctx.Deref(>PC, <imm12, 4, true, false, true))
                                nil
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100495f38>
                      #LDRSB<c> <Rt>,[<Rn>,#<imm12>]
                      #(1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opLDRSB({}, >Rt, ctx.Deref(>Rn, <imm12, 1, true, false, true))
                        nil
              else: #23
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0)]
                if not bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004997a0>
                              #LDRSHT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opLDRSHT({}, >Rt, ctx.Deref(<Rn, <imm8, 2, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100499440>
                        #LDRSH<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rn == PC: break
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if P.bit and U.bit and not W.bit: break
                          return ctx.opLDRSH({}, >Rt, ctx.Deref(>Rn, <imm8, 2, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004996c8>
                                  #LDRSH<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rn == PC or Rt == PC: break
                                    return ctx.opLDRSH({}, >Rt, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <imm2), 2, true, false, true))
                                    nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              if bit(insn, 11):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1)]
                                if bit(insn, 10):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1)]
                                  if not bit(insn, 9):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0)]
                                    if not bit(insn, 8):
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004a05f0>
                                      #PLI<c> [<Rn>,#-<imm8>]
                                      #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, 1, 1, 0, 0, None, None, None, None, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var imm8 : TBinary = insn[7,0]
                                        return ctx.opPLI({}, ctx.Deref(>PC, <imm8, 4, true, false, false))
                                        nil
                              else: #11
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0)]
                                if not bit(insn, 10):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0)]
                                  if not bit(insn, 9):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0)]
                                    if not bit(insn, 8):
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0)]
                                      if not bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004a0758>
                                          #PLI<c> [<Rn>,<Rm>{,LSL #<imm2>}]
                                          #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                          block:
                                            var Rn : TReg = TReg(insn[19,16].num)
                                            var shift : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            # XXX newer version has a W bit
                                            return ctx.opPLI({}, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <shift), 4, true, false, true))
                                            nil
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x100499320>
                              #LDRSBT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opLDRSBT({}, >Rt, ctx.Deref(>Rn, <imm8, 1, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100499050>
                        #LDRSB<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if Rn == PC: break
                          if P.bit and U.bit and not W.bit: break
                          if not P.bit and not W.bit: break
                          return ctx.opLDRSB({}, >Rt, ctx.Deref(>Rn, <imm8, 1, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x100499248>
                                  #LDRSB<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rt == PC or Rn == PC: break
                                    return ctx.opLDRSB({}, >Rt, ctx.Deref(>Rn, ctx.Shift(<Rm, LSL, <imm2), 1, true, false, true))
                                    nil
              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2)]
              if not bit(insn, 22):
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0)]
                if bit(insn, 21):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x100499560>
                            #LDRSH<c> <Rt>,[PC,#-0] Special case
                            #(1, 1, 1, 1, 1, 0, 0, 1, None, 0, 1, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var U : TBinary = insn[23,23]
                              var Rt : TReg = TReg(insn[15,12].num)
                              var imm12 : TBinary = insn[11,0]
                              if Rt == PC: break
                              return ctx.opLDRSH({}, >Rt, ctx.Deref(>PC, <imm12, 2, true, U.bit, true))
                              nil
                else: #21
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if bit(insn, 15):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                              if bit(insn, 14):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                if bit(insn, 13):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                  if bit(insn, 12):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x1004a0680>
                                    #PLI<c> <label>
                                    #(1, 1, 1, 1, 1, 0, 0, 1, None, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None)
                                    block:
                                      var U : TBinary = insn[23,23]
                                      var imm12 : TBinary = insn[11,0]
                                      return ctx.opPLI({}, ctx.Deref(>PC, <imm12, 4, true, false, U.bit))
                                      nil
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 1), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x100499098>
                            #LDRSB<c> <Rt>,[PC,#-0] Special case
                            #(1, 1, 1, 1, 1, 0, 0, 1, None, 0, 0, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var U : TBinary = insn[23,23]
                              var Rt : TReg = TReg(insn[15,12].num)
                              var imm12 : TBinary = insn[11,0]
                              if Rt == PC: break
                              return ctx.opLDRSB({}, >Rt, ctx.Deref(>PC, <imm12, 1, true, U.bit, true))
                              nil
            else: #24
              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0)]
              if bit(insn, 23):
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1)]
                if bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100491dd0>
                      #LDR<c>.W <Rt>,[<Rn>{,#<imm12>}]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rn == PC: break
                        return ctx.opLDR({}, >Rt, ctx.Deref(>Rn, <imm12, 4, true, false, true))
                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004a8ea8>
                      #STR<c>.W <Rt>,[<Rn>,#<imm12>]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rn == PC: break
                        return ctx.opSTR({}, <Rt, ctx.Deref(>Rn, <imm12, 4, true, false, true))
                        nil
                else: #22
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100495b00>
                      #LDRH<c>.W <Rt>,[<Rn>{,#<imm12>}]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opLDRH({}, >Rt, ctx.Deref(>Rn, <imm12, 2, true, false, true))
                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004ab9e0>
                      #STRH<c>.W <Rt>,[<Rn>{,#<imm12>}]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opSTRH({}, <Rt, ctx.Deref(>Rn, <imm12, 2, true, false, true))
                        nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004952d8>
                      #LDRB<c>.W <Rt>,[<Rn>{,#<imm12>}]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opLDRB({}, >Rt, ctx.Deref(>Rn, <imm12, 1, true, false, true))
                        nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004ab290>
                      #STRB<c>.W <Rt>,[<Rn>,#<imm12>]
                      #(1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var imm12 : TBinary = insn[11,0]
                        if Rt == PC or Rn == PC: break
                        return ctx.opSTRB({}, <Rt, ctx.Deref(>Rn, <imm12, 1, true, false, true))
                        nil
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x1004a0290>
                            #PLD{W}<c> [<Rn>,#<imm12>]
                            #(1, 1, 1, 1, 1, 0, 0, 0, 1, 0, None, 1, None, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var W : TBinary = insn[21,21]
                              var Rn : TReg = TReg(insn[19,16].num)
                              var imm12 : TBinary = insn[11,0]
                              if Rn == PC: break
                              return ctx.opPLD(if W.bit: {ifPLDW} else: {}, ctx.Deref(>Rn, <imm12, 4, true, false, true))
                              nil
              else: #23
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x100499878>
                              #LDRT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opLDRT({}, >Rt, ctx.Deref(<Rn, <imm8, 4, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100491e60>
                        #LDR<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rn == PC: break
                          if P.bit and U.bit and not W.bit: break
                          if Rn == SP and not P.bit and U.bit and W.bit and imm8 == b"00000100": break
                          if not P.bit and not W.bit: break
                          return ctx.opLDR({}, >Rt, ctx.Deref(>PC, <imm8, 4, P.bit, W.bit, U.bit))
                          # Where's mah label?
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x100495128>
                                  #LDR<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rn == PC: break
                                    return ctx.opLDR({}, >Rt, ctx.Deref(>Rn, ctx.Shift(<Rm, LSL, <imm2), 4, true, false, true))
                                    nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004abd88>
                              #STRT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opSTRT({}, <Rt, ctx.Deref(<Rn, <imm8, 4, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a8f38>
                        #STR<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rn == PC: break
                          if P.bit and U.bit and not W.bit: break
                          if Rn == SP and not P.bit and U.bit and W.bit and imm8 == b"00000100": break
                          if not P.bit and not W.bit: break
                          return ctx.opSTR({}, <Rt, ctx.Deref(>PC, <imm8, 4, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004ab0e0>
                                  #STR<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rn == PC: break
                                    return ctx.opSTR({}, <Rt, ctx.Deref(>Rn, ctx.Shift(<Rm, LSL, <imm2), 4, true, false, true))
                                    nil
                else: #22
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x100495e60>
                              #LDRHT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opLDRHT({}, >Rt, ctx.Deref(<Rn, <imm8, 2, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100495b90>
                        #LDRH<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rn == PC: break
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if P.bit and U.bit and not W.bit: break
                          return ctx.opLDRH({}, >Rt, ctx.Deref(>Rn, <imm8, 2, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x100495d88>
                                  #LDRH<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rn == PC or Rt == PC: break
                                    return ctx.opLDRH({}, >Rt, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <imm2), 2, true, false, true))
                                    nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004abcb0>
                              #STRHT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opSTRHT({}, <Rt, ctx.Deref(<Rn, <imm8, 2, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004aba70>
                        #STRH<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rn == PC: break
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if P.bit and U.bit and not W.bit: break
                          return ctx.opSTRH({}, <Rt, ctx.Deref(>Rn, <imm8, 2, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004abbd8>
                                  #STRH<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rn == PC or Rt == PC: break
                                    return ctx.opSTRH({}, <Rt, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <imm2), 2, true, false, true))
                                    nil
                  else: #21
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              if not bit(insn, 11):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0)]
                                if not bit(insn, 10):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0)]
                                  if not bit(insn, 9):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0)]
                                    if not bit(insn, 8):
                                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0)]
                                      if not bit(insn, 7):
                                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                        if not bit(insn, 6):
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                          #i: <__main__.instruction instance at 0x1004a04d0>
                                          #PLD<c> [<Rn>,<Rm>{,LSL #<imm2>}]
                                          #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, None, None, None, None, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                          block:
                                            var Rn : TReg = TReg(insn[19,16].num)
                                            var shift : TBinary = insn[5,4]
                                            var Rm : TReg = TReg(insn[3,0].num)
                                            if Rn == PC: break
                                            # XXX newer version has a W bit
                                            return ctx.opPLD({}, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <shift), 4, true, false, true))
                                            nil
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x100495638>
                              #LDRBT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opLDRBT({}, >Rt, ctx.Deref(>Rn, <imm8, 1, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x100495368>
                        #LDRB<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if Rn == PC: break
                          if P.bit and U.bit and not W.bit: break
                          if not P.bit and not W.bit: break
                          return ctx.opLDRB({}, >Rt, ctx.Deref(>Rn, <imm8, 1, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x100495560>
                                  #LDRB<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rt == PC or Rn == PC: break
                                    return ctx.opLDRB({}, >Rt, ctx.Deref(>Rn, ctx.Shift(<Rm, LSL, <imm2), 1, true, false, true))
                                    nil
                    else: #20
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004ab560>
                              #STRBT<c> <Rt>,[<Rn>,#<imm8>]
                              #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None, None, None, 1, 1, 1, 0, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                if Rn == PC: break
                                return ctx.opSTRBT({}, <Rt, ctx.Deref(>Rn, <imm8, 1, true, false, true))
                                nil
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004ab320>
                        #STRB<c> <Rt>,[<Rn>,#+/-<imm8>]!
                        #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var Rn : TReg = TReg(insn[19,16].num)
                          var Rt : TReg = TReg(insn[15,12].num)
                          var P : TBinary = insn[10,10]
                          var U : TBinary = insn[9,9]
                          var W : TBinary = insn[8,8]
                          var imm8 : TBinary = insn[7,0]
                          if Rt == PC and (P.bit and not U.bit and not W.bit): break
                          if Rn == PC: break
                          if P.bit and U.bit and not W.bit: break
                          if not P.bit and not W.bit: break
                          return ctx.opSTRB({}, <Rt, ctx.Deref(>Rn, <imm8, 1, P.bit, W.bit, U.bit))
                          nil
                      else: #11
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0)]
                        if not bit(insn, 10):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0)]
                          if not bit(insn, 9):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0)]
                            if not bit(insn, 8):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0)]
                              if not bit(insn, 7):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                if not bit(insn, 6):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004ab488>
                                  #STRB<c>.W <Rt>,[<Rn>,<Rm>{,LSL #<imm2>}]
                                  #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None, None, None, 0, 0, 0, 0, 0, 0, None, None, None, None, None, None)
                                  block:
                                    var Rn : TReg = TReg(insn[19,16].num)
                                    var Rt : TReg = TReg(insn[15,12].num)
                                    var imm2 : TBinary = insn[5,4]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if Rt == PC or Rn == PC: break
                                    return ctx.opSTRB({}, >Rt, ctx.Deref(>Rn, ctx.Shift(<Rm, LSL, <imm2), 1, true, false, true))
                                    nil
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if bit(insn, 15):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                      if bit(insn, 14):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                        if bit(insn, 13):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                          if bit(insn, 12):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                            if bit(insn, 11):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1)]
                              if bit(insn, 10):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1)]
                                if not bit(insn, 9):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0)]
                                  if not bit(insn, 8):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 1), (10, 1), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x1004a0368>
                                    #PLD{W}<c> [<Rn>,#-<imm8>]
                                    #(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, None, 1, None, None, None, None, 1, 1, 1, 1, 1, 1, 0, 0, None, None, None, None, None, None, None, None)
                                    block:
                                      var W : TBinary = insn[21,21]
                                      var Rn : TReg = TReg(insn[19,16].num)
                                      var imm8 : TBinary = insn[7,0]
                                      if Rn == PC: break
                                      return ctx.opPLD(if W.bit: {ifPLDW} else: {}, ctx.Deref(>Rn, <imm8, 4, true, false, false))
                                      nil
              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2)]
              if bit(insn, 22):
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x100491fc8>
                            #LDR<c>.W <Rt>,[PC,#-0] Special case
                            #(1, 1, 1, 1, 1, 0, 0, 0, None, 1, 0, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var U : TBinary = insn[23,23]
                              var Rt : TReg = TReg(insn[15,12].num)
                              var imm12 : TBinary = insn[11,0]
                              return ctx.opLDR({}, >Rt, ctx.Deref(>PC, <imm12, 4, true, U.bit, true))
                              nil
              else: #22
                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0)]
                if bit(insn, 21):
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x100495c20>
                            #LDRH<c> <Rt>,[PC,#-0] Special case
                            #(1, 1, 1, 1, 1, 0, 0, 0, None, 0, 1, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var U : TBinary = insn[23,23]
                              var Rt : TReg = TReg(insn[15,12].num)
                              var imm12 : TBinary = insn[11,0]
                              if Rt == PC: break
                              return ctx.opLDRH({}, >Rt, ctx.Deref(>PC, <imm12, 2, true, U.bit, true))
                              nil
                else: #21
                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if bit(insn, 15):
                              # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                              if bit(insn, 14):
                                # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1)]
                                if bit(insn, 13):
                                  # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1)]
                                  if bit(insn, 12):
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                    # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 1), (13, 1), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                    #i: <__main__.instruction instance at 0x1004a03f8>
                                    #PLD<c> <label>
                                    #(1, 1, 1, 1, 1, 0, 0, 0, None, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None)
                                    block:
                                      var U : TBinary = insn[23,23]
                                      var imm12 : TBinary = insn[11,0]
                                      return ctx.opPLD({}, ctx.Deref(>PC, <imm12, 4, true, false, U.bit))
                                      nil
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 1), (26, 0), (25, 0), (24, 0), (23, 2), (22, 0), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x1004953f8>
                            #LDRB<c> <Rt>,[PC,#-0] Special case
                            #(1, 1, 1, 1, 1, 0, 0, 0, None, 0, 0, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var U : TBinary = insn[23,23]
                              var Rt : TReg = TReg(insn[15,12].num)
                              var imm12 : TBinary = insn[11,0]
                              if Rt == PC: break
                              return ctx.opLDRB({}, >Rt, ctx.Deref(>PC, <imm12, 1, true, U.bit, true))
                              nil
      else: #27
        # [(28, 1), (27, 0)]
        if not bit(insn, 26):
          # [(28, 1), (27, 0), (26, 0)]
          if bit(insn, 25):
            # [(28, 1), (27, 0), (26, 0), (25, 1)]
            if bit(insn, 24):
              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1)]
              if bit(insn, 23):
                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1)]
                if bit(insn, 22):
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if not bit(insn, 14):
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0)]
                                  if not bit(insn, 13):
                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0)]
                                    if not bit(insn, 12):
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x10049d908>
                                      #MRS<c> <Rd>,<spec_reg>
                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None)
                                      block:
                                        var Rd : TReg = TReg(insn[11,8].num)
                                        var SYSm : TBinary = insn[7,0]
                                        return ctx.opMRS({}, >Rd, <SYSm)
                                        nil
                  else: #21
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        if not bit(insn, 5):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                          #i: <__main__.instruction instance at 0x1004afc68>
                          #UBFX<c> <Rd>,<Rn>,#<lsb>,#<width>
                          #(1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                          block:
                            var Rn : TReg = TReg(insn[19,16].num)
                            var imm3 : TBinary = insn[14,12]
                            var Rd : TReg = TReg(insn[11,8].num)
                            var imm2 : TBinary = insn[7,6]
                            var widthm1 : TBinary = insn[4,0]
                            return ctx.opUBFX({}, >Rd, <Rn, <cat(imm3, imm2), <(widthm1.num + 1))
                            nil
                else: #22
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if not bit(insn, 14):
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0)]
                                  if not bit(insn, 13):
                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0)]
                                    if not bit(insn, 12):
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0)]
                                      if bit(insn, 11):
                                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1)]
                                        if bit(insn, 10):
                                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1)]
                                          if bit(insn, 9):
                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1)]
                                            if bit(insn, 8):
                                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1)]
                                              if not bit(insn, 7):
                                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0)]
                                                if bit(insn, 6):
                                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1)]
                                                  if bit(insn, 5):
                                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 1)]
                                                    if not bit(insn, 4):
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 1), (4, 0)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 1), (4, 0), (3, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 1), (4, 0), (3, 2), (2, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 1), (4, 0), (3, 2), (2, 2), (1, 2)]
                                                      #i: <__main__.instruction instance at 0x100491680>
                                                      #ISB<c> #<option>
                                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, None, None, None, None)
                                                      block:
                                                        var option : TBinary = insn[3,0]
                                                        return ctx.opISB({}, <option)
                                                        nil
                                                  else: #5
                                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0)]
                                                    if bit(insn, 4):
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2), (2, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2), (2, 2), (1, 2)]
                                                      #i: <__main__.instruction instance at 0x100491368>
                                                      #DMB<c> #<option>
                                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, None, None, None, None)
                                                      block:
                                                        var option : TBinary = insn[3,0]
                                                        return ctx.opDMB({}, <option)
                                                        nil
                                                    else: #4
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2), (2, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                                      #i: <__main__.instruction instance at 0x1004913f8>
                                                      #DSB<c> #<option>
                                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, None, None, None, None)
                                                      block:
                                                        var option : TBinary = insn[3,0]
                                                        return ctx.opDSB({}, <option)
                                                        nil
                                                else: #6
                                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0)]
                                                  if bit(insn, 5):
                                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1)]
                                                    if not bit(insn, 4):
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0)]
                                                      if bit(insn, 3):
                                                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 1)]
                                                        if bit(insn, 2):
                                                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 1), (2, 1)]
                                                          if bit(insn, 1):
                                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 0), (5, 1), (4, 0), (3, 1), (2, 1), (1, 1)]
                                                            if bit(insn, 0):
                                                              #i: <__main__.instruction instance at 0x10048bb90>
                                                              #CLREX<c>
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1)
                                                              block:
                                                                return ctx.opCLREX({})
                                                                nil
                    else: #20
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if bit(insn, 15):
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1)]
                                if not bit(insn, 14):
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0)]
                                  if not bit(insn, 13):
                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0)]
                                    if not bit(insn, 12):
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0)]
                                      if not bit(insn, 11):
                                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0)]
                                        if not bit(insn, 10):
                                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0)]
                                          if not bit(insn, 9):
                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0)]
                                            if not bit(insn, 8):
                                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0)]
                                              if bit(insn, 7):
                                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1)]
                                                if bit(insn, 6):
                                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1)]
                                                  if bit(insn, 5):
                                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 1)]
                                                    if bit(insn, 4):
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 1), (4, 1)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2)]
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 1), (6, 1), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                                      #i: <__main__.instruction instance at 0x100491248>
                                                      #DBG<c> #<option>
                                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, None, None, None, None)
                                                      block:
                                                        var option : TBinary = insn[3,0]
                                                        return ctx.opDBG({}, <option)
                                                        nil
                                              else: #7
                                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                                if not bit(insn, 6):
                                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                                  if not bit(insn, 5):
                                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0)]
                                                    if not bit(insn, 4):
                                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0)]
                                                      if not bit(insn, 3):
                                                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0)]
                                                        if bit(insn, 2):
                                                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 1)]
                                                          if not bit(insn, 1):
                                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 1), (1, 0)]
                                                            if not bit(insn, 0):
                                                              #i: <__main__.instruction instance at 0x1004a85f0>
                                                              #SEV<c>.W
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0)
                                                              block:
                                                                return ctx.opSEV({})
                                                                nil
                                                        else: #2
                                                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 0)]
                                                          if bit(insn, 1):
                                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 0), (1, 1)]
                                                            if bit(insn, 0):
                                                              #i: <__main__.instruction instance at 0x1004b4440>
                                                              #WFI<c>.W
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1)
                                                              block:
                                                                return ctx.opWFI({})
                                                                nil
                                                            else: #0
                                                              #i: <__main__.instruction instance at 0x1004b42d8>
                                                              #WFE<c>.W
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0)
                                                              block:
                                                                return ctx.opWFE({})
                                                                nil
                                                          else: #1
                                                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 1), (14, 0), (13, 0), (12, 0), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 0), (3, 0), (2, 0), (1, 0)]
                                                            if bit(insn, 0):
                                                              #i: <__main__.instruction instance at 0x1004b4560>
                                                              #YIELD<c>.W
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
                                                              block:
                                                                return ctx.opYIELD({})
                                                                nil
                                                            else: #0
                                                              #i: <__main__.instruction instance at 0x10049de18>
                                                              #NOP<c>.W
                                                              #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                                                              block:
                                                                return ctx.opNOP({})
                                                                nil
                  else: #21
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if not bit(insn, 14):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0)]
                          if not bit(insn, 13):
                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0)]
                            if not bit(insn, 12):
                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0)]
                              if bit(insn, 11):
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1)]
                                if not bit(insn, 10):
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0)]
                                  if not bit(insn, 9):
                                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0)]
                                    if not bit(insn, 8):
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 0), (12, 0), (11, 1), (10, 0), (9, 0), (8, 0), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x10049d9e0>
                                      #MSR<c> <spec_reg>,<Rn>
                                      #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, None, None, None, None, 1, 0, 0, 0, 1, 0, 0, 0, None, None, None, None, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var SYSm : TBinary = insn[7,0]
                                        return ctx.opMSR({}, <SYSm, <Rn)
                                        nil
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      if not bit(insn, 5):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004aff80>
                        #USAT<c> <Rd>,#<imm5>,<Rn>{,<shift>}
                        #(1, 1, 1, 1, 0, 0, 1, 1, 1, 0, None, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                        block:
                          var sh : TBinary = insn[21,21]
                          var Rn : TReg = TReg(insn[19,16].num)
                          var imm3 : TBinary = insn[14,12]
                          var Rd : TReg = TReg(insn[11,8].num)
                          var imm2 : TBinary = insn[7,6]
                          var sat_imm : TBinary = insn[4,0]
                          if sh.bit and imm3 == b"000" and imm2 == b"00": break
                          return ctx.opUSAT({}, >Rd, <sat_imm, ctx.DIShift(<Rn, cat(sh, b"0"), cat(imm3, imm2)))
                          nil
              else: #23
                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0)]
                if bit(insn, 22):
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1)]
                          if bit(insn, 17):
                            # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1)]
                            if bit(insn, 16):
                              # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                              if not bit(insn, 15):
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                if not bit(insn, 5):
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x10048b440>
                                  #BFC<c> <Rd>,#<lsb>,#<width>
                                  #(1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                                  block:
                                    var imm3 : TBinary = insn[14,12]
                                    var Rd : TReg = TReg(insn[11,8].num)
                                    var imm2 : TBinary = insn[7,6]
                                    var msb : TBinary = insn[4,0]
                                    var lsb = cat(imm3, imm2)
                                    return ctx.opBFC({}, >Rd, <lsb, <(msb.num - lsb.num + 1))
                                    nil
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        if not bit(insn, 5):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                          #i: <__main__.instruction instance at 0x10048b518>
                          #BFI<c> <Rd>,<Rn>,#<lsb>,#<width>
                          #(1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                          block:
                            var Rn : TReg = TReg(insn[19,16].num)
                            var imm3 : TBinary = insn[14,12]
                            var Rd : TReg = TReg(insn[11,8].num)
                            var imm2 : TBinary = insn[7,6]
                            var msb : TBinary = insn[4,0]
                            var lsb = cat(imm3, imm2)
                            return ctx.opBFI({}, >Rd, <Rn, <lsb, <(msb.num - lsb.num + 1))
                            nil
                  else: #21
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0)]
                    if not bit(insn, 20):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        if not bit(insn, 5):
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                          # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                          #i: <__main__.instruction instance at 0x1004a84d0>
                          #SBFX<c> <Rd>,<Rn>,#<lsb>,#<width>
                          #(1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                          block:
                            var Rn : TReg = TReg(insn[19,16].num)
                            var imm3 : TBinary = insn[14,12]
                            var Rd : TReg = TReg(insn[11,8].num)
                            var imm2 : TBinary = insn[7,6]
                            var widthm1 : TBinary = insn[4,0]
                            return ctx.opSBFX({}, >Rd, <Rn, <cat(imm3, imm2), <(widthm1.num + 1))
                            nil
                else: #22
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0)]
                  # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      if not bit(insn, 5):
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2)]
                        # [(28, 1), (27, 0), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a88c0>
                        #SSAT<c> <Rd>,#<imm5>,<Rn>{,<shift>}
                        #(1, 1, 1, 1, 0, 0, 1, 1, 0, 0, None, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, 0, None, None, None, None, None)
                        block:
                          var sh : TBinary = insn[21,21]
                          var Rn : TReg = TReg(insn[19,16].num)
                          var imm3 : TBinary = insn[14,12]
                          var Rd : TReg = TReg(insn[11,8].num)
                          var imm2 : TBinary = insn[7,6]
                          var sat_imm : TBinary = insn[4,0]
                          if sh.bit and imm3 == b"000" and imm2 == b"00": break
                          return ctx.opSSAT({}, >Rd, <sat_imm, ctx.DIShift(<Rn, cat(sh, b"0"), cat(imm3, imm2)))
                          nil
        # [(28, 1), (27, 0), (26, 2)]
        if bit(insn, 25):
          # [(28, 1), (27, 0), (26, 2), (25, 1)]
          if not bit(insn, 24):
            # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0)]
            if bit(insn, 23):
              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1)]
              if bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049d638>
                      #MOVT<c> <Rd>,#<imm16>
                      #(1, 1, 1, 1, 0, None, 1, 0, 1, 1, 0, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var i : TBinary = insn[26,26]
                        var imm4 : TBinary = insn[19,16]
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm8 : TBinary = insn[7,0]
                        return ctx.opMOVT({}, >Rd, <cat(imm4, i, imm3, imm8))
                        nil
              else: #22
                # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0)]
                if bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10043cb90>
                              #SUB <Rd>,PC,#0 Special case for zero offset
                              #(1, 1, 1, 1, 0, None, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opADR({}, >Rd, <PC, <(-cat(i, imm3, imm8).num))
                                nil
                        else: #17
                          # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004af3b0>
                              #SUBW<c> <Rd>,SP,#<imm12>
                              #(1, 1, 1, 1, 0, None, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opSUB({}, >Rd, <SP, <cat(i, imm3, imm8))
                                nil
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 1), (22, 0), (21, 1), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004af098>
                      #SUBW<c> <Rd>,<Rn>,#<imm12>
                      #(1, 1, 1, 1, 0, None, 1, 0, 1, 0, 1, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var i : TBinary = insn[26,26]
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm8 : TBinary = insn[7,0]
                        if Rn == PC: break
                        if Rn == SP: break
                        return ctx.opSUB({}, >Rd, <Rn, <cat(i, imm3, imm8))
                        nil
            else: #23
              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0)]
              if bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049d440>
                      #MOVW<c> <Rd>,#<imm16>
                      #(1, 1, 1, 1, 0, None, 1, 0, 0, 1, 0, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var i : TBinary = insn[26,26]
                        var imm4 : TBinary = insn[19,16]
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm8 : TBinary = insn[7,0]
                        return ctx.opMOV({}, >Rd, <cat(imm4, i, imm3, imm8))
                        nil
              else: #22
                # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0)]
                  if not bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0)]
                    if bit(insn, 19):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10043cc20>
                              #ADR<c>.W <Rd>,<label> <label> after current instruction
                              #(1, 1, 1, 1, 0, None, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opADR({}, <Rd, <PC, <(cat(i, imm3, imm8).num))
                                nil
                        else: #17
                          # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0)]
                          if bit(insn, 16):
                            # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10043c8c0>
                              #ADDW<c> <Rd>,SP,#<imm12>
                              #(1, 1, 1, 1, 0, None, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opADD({}, >Rd, <SP, <cat(i, imm3, imm8))
                                nil
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10043c5a8>
                      #ADDW<c> <Rd>,<Rn>,#<imm12>
                      #(1, 1, 1, 1, 0, None, 1, 0, 0, 0, 0, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var i : TBinary = insn[26,26]
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm8 : TBinary = insn[7,0]
                        return ctx.opADD({}, >Rd, <Rn, <cat(i, imm3, imm8))
                        nil
        else: #25
          # [(28, 1), (27, 0), (26, 2), (25, 0)]
          if bit(insn, 24):
            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1)]
            if bit(insn, 23):
              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1)]
              if bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x1004a8200>
                    #RSB{S}<c>.W <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 1, 1, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opRSB(S, >Rd, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                      nil
              else: #22
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0)]
                if bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10048bf38>
                              #CMP<c>.W <Rn>,#<const>
                              #(1, 1, 1, 1, 0, None, 0, 1, 1, 0, 1, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var Rn : TReg = TReg(insn[19,16].num)
                                var imm3 : TBinary = insn[14,12]
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opCMP({ifS}, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                                nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2)]
                  if bit(insn, 19):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1)]
                    if bit(insn, 18):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1)]
                      if not bit(insn, 17):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0)]
                        if bit(insn, 16):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1)]
                          if not bit(insn, 15):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x1004af320>
                            #SUB{S}<c>.W <Rd>,SP,#<const>
                            #(1, 1, 1, 1, 0, None, 0, 1, 1, 0, 1, None, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var i : TBinary = insn[26,26]
                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                              var imm3 : TBinary = insn[14,12]
                              var Rd : TReg = TReg(insn[11,8].num)
                              var imm8 : TBinary = insn[7,0]
                              return ctx.opSUB(S, >Rd, <SP, <cat(i, imm3, imm8))
                              nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x1004abf80>
                    #SUB{S}<c>.W <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 1, 1, 0, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      if Rd == PC and S == {ifS}: break
                      if Rn == SP: break
                      return ctx.opSUB(S, >Rd, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                      nil
            else: #23
              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0)]
              if bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1)]
                if bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x1004a8368>
                    #SBC{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 1, 0, 1, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opSBC(S, >Rd, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                      nil
                else: #21
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10043c3b0>
                    #ADC{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 1, 0, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opADC(S, >Rd, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                      nil
              else: #22
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10048bcb0>
                              #CMN<c> <Rn>,#<const>
                              #(1, 1, 1, 1, 0, None, 0, 1, 0, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var Rn : TReg = TReg(insn[19,16].num)
                                var imm3 : TBinary = insn[14,12]
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opCMN({ifS}, >Rn, ctx.TEImm(cat(i, imm3, imm8)))
                                nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2)]
                  if bit(insn, 19):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1)]
                    if bit(insn, 18):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1)]
                      if not bit(insn, 17):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0)]
                        if bit(insn, 16):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1)]
                          if not bit(insn, 15):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x10043c830>
                            #ADD{S}<c>.W <Rd>,SP,#<const>
                            #(1, 1, 1, 1, 0, None, 0, 1, 0, 0, 0, None, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var i : TBinary = insn[26,26]
                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                              var imm3 : TBinary = insn[14,12]
                              var Rd : TReg = TReg(insn[11,8].num)
                              var imm8 : TBinary = insn[7,0]
                              if Rd == PC and S == {ifS}: break
                              return ctx.opADD(S, >Rd, <SP, <ctx.TEImm(cat(i, imm3, imm8)))
                              nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10043c488>
                    #ADD{S}<c>.W <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 1, 0, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opADD(S, >Rd, <Rn, <ctx.TEImm(cat(i, imm3, imm8)))
                      nil
          else: #24
            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0)]
            if bit(insn, 23):
              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1)]
              if not bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0)]
                if not bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004af908>
                              #TEQ<c> <Rn>,#<const>
                              #(1, 1, 1, 1, 0, None, 0, 0, 1, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var Rn : TReg = TReg(insn[19,16].num)
                                var imm3 : TBinary = insn[14,12]
                                var imm8 : TBinary = insn[7,0]
                                var r = ctx.TEImm_C(cat(i, imm3, imm8))
                                return ctx.opTEQ({ifS} + r.setCarry, <Rn, <r.ent)
                                nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x100491488>
                    #EOR{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 0, 1, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      return ctx.opEOR(S, >Rd, <Rn, ctx.TEImm(cat(i, imm3, imm8)))
                      nil
            else: #23
              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0)]
              if bit(insn, 22):
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1)]
                if bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2)]
                  if bit(insn, 19):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1)]
                    if bit(insn, 18):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1)]
                      if bit(insn, 17):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1)]
                        if bit(insn, 16):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1)]
                          if not bit(insn, 15):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x10049db48>
                            #MVN{S}<c> <Rd>,#<const>
                            #(1, 1, 1, 1, 0, None, 0, 0, 0, 1, 1, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var i : TBinary = insn[26,26]
                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                              var imm3 : TBinary = insn[14,12]
                              var Rd : TReg = TReg(insn[11,8].num)
                              var imm8 : TBinary = insn[7,0]
                              var r = ctx.TEImm_C(cat(i, imm3, imm8))
                              ##return ctx.opMOV(S + r.setCarry, >Rd, <(not r.ent))
                              return ctx.opMVN(S + r.setCarry, >Rd, <r.ent)
                              nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10049def0>
                    #ORN{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 0, 0, 1, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      var r = ctx.TEImm_C(cat(i, imm3, imm8))
                      return ctx.opORN(S + r.setCarry, >Rd, <Rn, <r.ent)
                      nil
                else: #21
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2)]
                  if bit(insn, 19):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1)]
                    if bit(insn, 18):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1)]
                      if bit(insn, 17):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1)]
                        if bit(insn, 16):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1)]
                          if not bit(insn, 15):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                            #i: <__main__.instruction instance at 0x10049d3b0>
                            #MOV{S}<c>.W <Rd>,#<const>
                            #(1, 1, 1, 1, 0, None, 0, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                            block:
                              var i : TBinary = insn[26,26]
                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                              var imm3 : TBinary = insn[14,12]
                              var Rd : TReg = TReg(insn[11,8].num)
                              var imm8 : TBinary = insn[7,0]
                              var r = ctx.TEImm_C(cat(i, imm3, imm8))
                              return ctx.opMOV(S + r.setCarry, >Rd, <r.ent)
                              nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x1004a0098>
                    #ORR{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 0, 0, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      var r = ctx.TEImm_C(cat(i, imm3, imm8))
                      return ctx.opORR(S + r.setCarry, >Rd, <Rn, <r.ent)
                      nil
              else: #22
                # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0)]
                if bit(insn, 21):
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10048b5f0>
                    #BIC{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 0, 0, 0, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      var r = ctx.TEImm_C(cat(i, imm3, imm8))
                      return ctx.opBIC(S + r.setCarry, >Rd, <Rn, r.ent)
                      nil
                else: #21
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0)]
                  if bit(insn, 20):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004afab8>
                              #TST<c> <Rn>,#<const>
                              #(1, 1, 1, 1, 0, None, 0, 0, 0, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                              block:
                                var i : TBinary = insn[26,26]
                                var Rn : TReg = TReg(insn[19,16].num)
                                var imm3 : TBinary = insn[14,12]
                                var imm8 : TBinary = insn[7,0]
                                var r = ctx.TEImm_C(cat(i, imm3, imm8))
                                return ctx.opTST({ifS} + r.setCarry, <Rn, <r.ent)
                                nil
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                  # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                  if not bit(insn, 15):
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                    # [(28, 1), (27, 0), (26, 2), (25, 0), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                    #i: <__main__.instruction instance at 0x10043ccf8>
                    #AND{S}<c> <Rd>,<Rn>,#<const>
                    #(1, 1, 1, 1, 0, None, 0, 0, 0, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                    block:
                      var i : TBinary = insn[26,26]
                      var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                      var Rn : TReg = TReg(insn[19,16].num)
                      var imm3 : TBinary = insn[14,12]
                      var Rd : TReg = TReg(insn[11,8].num)
                      var imm8 : TBinary = insn[7,0]
                      if Rd == PC and S == {ifS}: break
                      var r = ctx.TEImm_C(cat(i, imm3, imm8))
                      return ctx.opAND(S + r.setCarry, >Rd, <Rn, <r.ent)
                      nil
        # [(28, 1), (27, 0), (26, 2), (25, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2)]
        # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
        if bit(insn, 15):
          # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
          if bit(insn, 14):
            # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
            # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2)]
            if bit(insn, 12):
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10048b7e8>
              #BL<c> <label>
              #(1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, 1, 1, None, 1, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var S : TInsnFlags = if insn[26,26].bit: {ifS} else: {}
                var imm10 : TBinary = insn[25,16]
                var J1 : TBinary = insn[13,13]
                var J2 : TBinary = insn[11,11]
                var imm11 : TBinary = insn[10,0]
                return ctx.opBL({}, <(sxt(cat(Binary(cast[int](S), 1), J1, J2, imm10, imm11, b"0"))))
                nil
          else: #14
            # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0)]
            # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2)]
            if bit(insn, 12):
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 1), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10048b368>
              #B<c>.W <label>
              #(1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, 1, 0, None, 1, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var S : TInsnFlags = if insn[26,26].bit: {ifS} else: {}
                var imm10 : TBinary = insn[25,16]
                var J1 : TBinary = insn[13,13]
                var J2 : TBinary = insn[11,11]
                var imm11 : TBinary = insn[10,0]
                var SA = cast[int](S)
                return ctx.opB(S, <(sxt(cat(Binary(SA, 1), Binary(J1.num xor SA, 1), Binary(J2.num xor SA, 1), imm10, imm11, b"0"))))
                nil
            else: #12
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 1), (27, 0), (26, 2), (25, 2), (24, 2), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 0), (13, 2), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x10048b2d8>
              #B<c>.W <label>
              #(1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, 1, 0, None, 0, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var S : TInsnFlags = if insn[26,26].bit: {ifS} else: {}
                var cond : TBinary = insn[25,22]
                var imm6 : TBinary = insn[21,16]
                var J1 : TBinary = insn[13,13]
                var J2 : TBinary = insn[11,11]
                var imm11 : TBinary = insn[10,0]
                var SA = cast[int](S)
                return ctx.opB(S + fromCond(cond), <(sxt(cat(Binary(SA, 1), J1, J2, imm6, imm11, b"0"))))
                nil
    else: #28
      # [(28, 0)]
      if bit(insn, 27):
        # [(28, 0), (27, 1)]
        if bit(insn, 26):
          # [(28, 0), (27, 1), (26, 1)]
          if bit(insn, 25):
            # [(28, 0), (27, 1), (26, 1), (25, 1)]
            if not bit(insn, 24):
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2)]
              if bit(insn, 20):
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                if bit(insn, 4):
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x10049d710>
                  #MRC<c> <coproc>,<opc1>,<Rt>,<CRn>,<CRm>{,<opc2>}
                  #(1, 1, 1, 0, 1, 1, 1, 0, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, None, None, None)
                  block:
                    var opc1 : TBinary = insn[23,21]
                    var CRn : TBinary = insn[19,16]
                    var Rt : TReg = TReg(insn[15,12].num)
                    var coproc : TBinary = insn[11,8]
                    var opc2 : TBinary = insn[7,5]
                    var CRm : TBinary = insn[3,0]
                    if coproc[3,1] == b"101": break
                    return ctx.opMRC({}, <coproc, <opc1, >Rt, <Crn, <Crm, <opc2)
                    nil
              else: #20
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                if bit(insn, 4):
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2)]
                  # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 1), (3, 2), (2, 2), (1, 2)]
                  #i: <__main__.instruction instance at 0x100499ea8>
                  #MCR<c> <coproc>,<opc1>,<Rt>,<CRn>,<CRm>{,<opc2>}
                  #(1, 1, 1, 0, 1, 1, 1, 0, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, None, None, None, None)
                  block:
                    var opc1 : TBinary = insn[23,21]
                    var CRn : TBinary = insn[19,16]
                    var Rt : TReg = TReg(insn[15,12].num)
                    var coproc : TBinary = insn[11,8]
                    var opc2 : TBinary = insn[7,5]
                    var CRm : TBinary = insn[3,0]
                    if coproc[3,1] == b"101": break
                    return ctx.opMCR({}, <coproc, <opc1, <Rt, <Crn, <Crm, <opc2)
                    nil
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              if not bit(insn, 4):
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2), (2, 2)]
                # [(28, 0), (27, 1), (26, 1), (25, 1), (24, 0), (23, 2), (22, 2), (21, 2), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 0), (3, 2), (2, 2), (1, 2)]
                #i: <__main__.instruction instance at 0x10048ba70>
                #CDP<c> <coproc>,<opc1>,<CRd>,<CRn>,<CRm>,<opc2>
                #(1, 1, 1, 0, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 0, None, None, None, None)
                block:
                  var opc1 : TBinary = insn[23,20]
                  var CRn : TBinary = insn[19,16]
                  var CRd : TBinary = insn[15,12]
                  var coproc : TBinary = insn[11,8]
                  var opc2 : TBinary = insn[7,5]
                  var CRm : TBinary = insn[3,0]
                  return ctx.opCDP({}, <coproc, <opc1, <CRd, <CRn, <CRm, <opc2)
                  nil
          else: #25
            # [(28, 0), (27, 1), (26, 1), (25, 0)]
            if not bit(insn, 24):
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0)]
              if not bit(insn, 23):
                # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049d7e8>
                      #MRRC<c> <coproc>,<opc>,<Rt>,<Rt2>,<CRm>
                      #(1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rt2 : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var coproc : TBinary = insn[11,8]
                        var opc1 : TBinary = insn[7,4]
                        var CRm : TBinary = insn[3,0]
                        if coproc[3,1] == b"101": break
                        return ctx.opMRRC({}, <coproc, <opc1, >Rt, >Rt2, <Crm)
                        nil
                    else: #20
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100499f80>
                      #MCRR<c> <coproc>,<opc1>,<Rt>,<Rt2>,<CRm>
                      #(1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rt2 : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var coproc : TBinary = insn[11,8]
                        var opc1 : TBinary = insn[7,4]
                        var CRm : TBinary = insn[3,0]
                        if coproc[3,1] == b"101": break
                        return ctx.opMCRR({}, <coproc, <opc1, <Rt, <Rt2, <CRm)
                        nil
            # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2)]
            # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2)]
            # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2)]
            # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2)]
            if bit(insn, 20):
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1)]
              if bit(insn, 19):
                # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1)]
                if bit(insn, 18):
                  # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1)]
                  if bit(insn, 17):
                    # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1)]
                    if bit(insn, 16):
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100491878>
                      #LDC{L}<c> <coproc>,<CRd>,[PC,#-0] Special case LDC{L}<c> <coproc>,<CRd>,[PC],<option>
                      #(1, 1, 1, 0, 1, 1, 0, None, None, None, None, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var P : TBinary = insn[24,24]
                        var U : TBinary = insn[23,23]
                        var D : TBinary = insn[22,22]
                        var W : TBinary = insn[21,21]
                        var CRd : TBinary = insn[15,12]
                        var coproc : TBinary = insn[11,8]
                        var imm8 : TBinary = insn[7,0]
                        
                        nil
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x100491758>
              #LDC{L}<c> <coproc>,<CRd>,[<Rn>],<option>
              #(1, 1, 1, 0, 1, 1, 0, None, None, None, None, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var P : TBinary = insn[24,24]
                var U : TBinary = insn[23,23]
                var D : TBinary = insn[22,22]
                var W : TBinary = insn[21,21]
                var Rn : TReg = TReg(insn[19,16].num)
                var CRd : TBinary = insn[15,12]
                var coproc : TBinary = insn[11,8]
                var imm8 : TBinary = insn[7,0]
                if P == b"0" and W == b"0": break
                return ctx.opLDC({}, <coproc, <CRd, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, P.bit, W.bit, U.bit))
                nil
            else: #20
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
              # [(28, 0), (27, 1), (26, 1), (25, 0), (24, 2), (23, 2), (22, 2), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
              #i: <__main__.instruction instance at 0x1004a8998>
              #STC{L}<c> <coproc>,<CRd>,[<Rn>],<option>
              #(1, 1, 1, 0, 1, 1, 0, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
              block:
                var P : TBinary = insn[24,24]
                var U : TBinary = insn[23,23]
                var N : TBinary = insn[22,22]
                var W : TBinary = insn[21,21]
                var Rn : TReg = TReg(insn[19,16].num)
                var CRd : TBinary = insn[15,12]
                var coproc : TBinary = insn[11,8]
                var imm8 : TBinary = insn[7,0]
                var D = N
                if not P.bit and not U.bit and D.bit and not W.bit: break
                if coproc[3,1] == b"101": break
                return ctx.opSTC({}, <coproc, <CRd, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, P.bit, W.bit, U.bit))
                nil
        else: #26
          # [(28, 0), (27, 1), (26, 0)]
          if bit(insn, 25):
            # [(28, 0), (27, 1), (26, 0), (25, 1)]
            if bit(insn, 24):
              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1)]
              if bit(insn, 23):
                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004a8248>
                      #RSB{S}<c> <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opRSB(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                else: #22
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        if bit(insn, 11):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                          if bit(insn, 10):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                            if bit(insn, 9):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                              if bit(insn, 8):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                #i: <__main__.instruction instance at 0x100491170>
                                #CMP<c>.W <Rn>, <Rm> {,<shift>}
                                #(1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                                block:
                                  var Rn : TReg = TReg(insn[19,16].num)
                                  var imm3 : TBinary = insn[14,12]
                                  var imm2 : TBinary = insn[7,6]
                                  var typ : TBinary = insn[5,4]
                                  var Rm : TReg = TReg(insn[3,0].num)
                                  return ctx.opCMP({}, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                  nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2)]
                    if bit(insn, 19):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1)]
                        if not bit(insn, 17):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0)]
                          if bit(insn, 16):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x1004af488>
                              #SUB{S}<c> <Rd>,SP,<Rm>{,<shift>}
                              #(1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, None, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm2 : TBinary = insn[7,6]
                                var typ : TBinary = insn[5,4]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opSUB(S, >Rd, <SP, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 1), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004af1b8>
                      #SUB{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        if Rd == PC and S == {ifS}: break
                        if Rn == SP: break
                        return ctx.opSUB(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
              else: #23
                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004a8488>
                      #SBC{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opSBC(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                  else: #21
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10043c638>
                      #ADC{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opADC(S, >Rd, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                else: #22
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        if bit(insn, 11):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                          if bit(insn, 10):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                            if bit(insn, 9):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                              if bit(insn, 8):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                #i: <__main__.instruction instance at 0x10048be18>
                                #CMN<c>.W <Rn>,<Rm>{,<shift>}
                                #(1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                                block:
                                  var Rn : TReg = TReg(insn[19,16].num)
                                  var imm3 : TBinary = insn[14,12]
                                  var imm2 : TBinary = insn[7,6]
                                  var typ : TBinary = insn[5,4]
                                  var Rm : TReg = TReg(insn[3,0].num)
                                  return ctx.opCMN({ifS}, >Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                  nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2)]
                    if bit(insn, 19):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1)]
                        if not bit(insn, 17):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0)]
                          if bit(insn, 16):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10043ca70>
                              #ADD{S}<c>.W <Rd>,SP,<Rm>{,<shift>}
                              #(1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, None, 1, 1, 0, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm2 : TBinary = insn[7,6]
                                var typ : TBinary = insn[5,4]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opADD(S, >Rd, <SP, <ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 1), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10043c680>
                      #ADD{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        if Rd == PC and S == {ifS}: break
                        if Rn == SP: break
                        return ctx.opADD(S, >Rd, <Rn, <ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
            else: #24
              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0)]
              if bit(insn, 23):
                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1)]
                if not bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        if bit(insn, 11):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                          if bit(insn, 10):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                            if bit(insn, 9):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                              if bit(insn, 8):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                #i: <__main__.instruction instance at 0x1004afa28>
                                #TEQ<c> <Rn>,<Rm>{,<shift>}
                                #(1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                                block:
                                  var Rn : TReg = TReg(insn[19,16].num)
                                  var imm3 : TBinary = insn[14,12]
                                  var imm2 : TBinary = insn[7,6]
                                  var typ : TBinary = insn[5,4]
                                  var Rm : TReg = TReg(insn[3,0].num)
                                  return ctx.opTEQ({ifS}, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                  nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 1), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004915a8>
                      #EOR{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opEOR(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
              else: #23
                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2)]
                    if bit(insn, 19):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x10049dcf8>
                              #MVN{S}<c>.W <Rd>,<Rm>{,shift>}
                              #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                              block:
                                var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                var imm3 : TBinary = insn[14,12]
                                var Rd : TReg = TReg(insn[11,8].num)
                                var imm2 : TBinary = insn[7,6]
                                var typ : TBinary = insn[5,4]
                                var Rm : TReg = TReg(insn[3,0].num)
                                return ctx.opMVN(S, >Rd, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10049df80>
                      #ORN{S}<c> <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opORN(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                  else: #21
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2)]
                    if bit(insn, 19):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1)]
                      if bit(insn, 18):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1)]
                        if bit(insn, 17):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1)]
                          if bit(insn, 16):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1)]
                            if not bit(insn, 15):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0)]
                              if not bit(insn, 14):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0)]
                                if not bit(insn, 13):
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0)]
                                  if not bit(insn, 12):
                                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0)]
                                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2)]
                                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2)]
                                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2)]
                                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2)]
                                    if not bit(insn, 7):
                                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0)]
                                      if not bit(insn, 6):
                                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0)]
                                        if bit(insn, 5):
                                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 1)]
                                          if bit(insn, 4):
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 1), (4, 1)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 1), (4, 1), (3, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 1), (4, 1), (3, 2), (2, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                            #i: <__main__.instruction instance at 0x1004a8098>
                                            #RRX{S}<c> <Rd>,<Rm>
                                            #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, 0, 0, 0, None, None, None, None, 0, 0, 1, 1, None, None, None, None)
                                            block:
                                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                              var Rd : TReg = TReg(insn[11,8].num)
                                              var Rm : TReg = TReg(insn[3,0].num)
                                              return ctx.opRRX(S, >Rd, ctx.Shift(<Rm, RRX, <1))
                                              nil
                                        else: #5
                                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0)]
                                          if not bit(insn, 4):
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 0), (13, 0), (12, 0), (11, 2), (10, 2), (9, 2), (8, 2), (7, 0), (6, 0), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                            #i: <__main__.instruction instance at 0x10049d5f0>
                                            #MOV{S}<c>.W <Rd>,<Rm>
                                            #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, 0, 0, 0, None, None, None, None, 0, 0, 0, 0, None, None, None, None)
                                            block:
                                              var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                              var Rd : TReg = TReg(insn[11,8].num)
                                              var Rm : TReg = TReg(insn[3,0].num)
                                              return ctx.opMOV(S, >Rd, <Rm)
                                              nil
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                              if bit(insn, 5):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1)]
                                if bit(insn, 4):
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 1)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 1), (3, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 1), (3, 2), (2, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 1), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004a0e60>
                                  #ROR{S}<c> <Rd>,<Rm>,#<imm5>
                                  #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, 1, 1, None, None, None, None)
                                  block:
                                    var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                    var imm3 : TBinary = insn[14,12]
                                    var Rd : TReg = TReg(insn[11,8].num)
                                    var imm2 : TBinary = insn[7,6]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    if imm3 == b"000" and imm2 == b"00": break
                                    return ctx.opROR(S, >Rd, ctx.Shift(<Rm, ROR, <cat(imm3, imm2)))
                                    nil
                                else: #4
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 0)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 0), (3, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 0), (3, 2), (2, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 1), (4, 0), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x10043cf80>
                                  #ASR{S}<c>.W <Rd>,<Rm>,#<imm5>
                                  #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, 1, 0, None, None, None, None)
                                  block:
                                    var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                    var imm3 : TBinary = insn[14,12]
                                    var Rd : TReg = TReg(insn[11,8].num)
                                    var imm2 : TBinary = insn[7,6]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    #return ctx.opASR(S, Rd, Rm, cat(imm3, imm2))
                                    nil
                              else: #5
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0)]
                                if bit(insn, 4):
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 1)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 1), (3, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 1), (3, 2), (2, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 1), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x100499cb0>
                                  #LSR{S}<c>.W <Rd>,<Rm>,#<imm5>
                                  #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, 0, 1, None, None, None, None)
                                  block:
                                    var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                    var imm3 : TBinary = insn[14,12]
                                    var Rd : TReg = TReg(insn[11,8].num)
                                    var imm2 : TBinary = insn[7,6]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    return ctx.opLSR(S, >Rd, ctx.Shift(<Rm, LSR, <cat(imm3, imm2)))
                                    nil
                                else: #4
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 0)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 0), (3, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 0), (3, 2), (2, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 1), (18, 1), (17, 1), (16, 1), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004999e0>
                                  #LSL{S}<c>.W <Rd>,<Rm>,#<imm5>
                                  #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, 1, 1, 1, 1, 0, None, None, None, None, None, None, None, None, None, 0, 0, None, None, None, None)
                                  block:
                                    var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                                    var imm3 : TBinary = insn[14,12]
                                    var Rd : TReg = TReg(insn[11,8].num)
                                    var imm2 : TBinary = insn[7,6]
                                    var Rm : TReg = TReg(insn[3,0].num)
                                    return ctx.opLSL(S, >Rd, ctx.Shift(<Rm, LSL, <cat(imm3, imm2)))
                                    nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 1), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004a01b8>
                      #ORR{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opORR(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                else: #22
                  # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 1), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10048b710>
                      #BIC{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        return ctx.opBIC(S, >Rd, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                        nil
                  else: #21
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if not bit(insn, 15):
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                        if bit(insn, 11):
                          # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1)]
                          if bit(insn, 10):
                            # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                            if bit(insn, 9):
                              # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                              if bit(insn, 8):
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                #i: <__main__.instruction instance at 0x1004afc20>
                                #TST<c>.W <Rn>,<Rm>{,<shift>}
                                #(1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, None, None, None, None, 0, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                                block:
                                  var Rn : TReg = TReg(insn[19,16].num)
                                  var imm3 : TBinary = insn[14,12]
                                  var imm2 : TBinary = insn[7,6]
                                  var typ : TBinary = insn[5,4]
                                  var Rm : TReg = TReg(insn[3,0].num)
                                  return ctx.opTST({ifS}, <Rn, ctx.DIShift(<Rm, typ, cat(imm3, imm2)))
                                  nil
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 1), (24, 0), (23, 0), (22, 0), (21, 0), (20, 2), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x10043ce18>
                      #AND{S}<c>.W <Rd>,<Rn>,<Rm>{,<shift>}
                      #(1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var S : TInsnFlags = if insn[20,20].bit: {ifS} else: {}
                        var Rn : TReg = TReg(insn[19,16].num)
                        var imm3 : TBinary = insn[14,12]
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm2 : TBinary = insn[7,6]
                        var typ : TBinary = insn[5,4]
                        var Rm : TReg = TReg(insn[3,0].num)
                        #return ctx.opASR(t, Rd, Rn, ctx.DIShift(42))#>Rm, b"10", cat(imm3, imm2)))
                        nil
          else: #25
            # [(28, 0), (27, 1), (26, 0), (25, 0)]
            if bit(insn, 24):
              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1)]
              if not bit(insn, 23):
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0)]
                if not bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1)]
                    if not bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0)]
                      if bit(insn, 19):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1)]
                          if not bit(insn, 17):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0)]
                            if bit(insn, 16):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1)]
                              if not bit(insn, 15):
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2)]
                                if not bit(insn, 13):
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 1), (20, 0), (19, 1), (18, 1), (17, 0), (16, 1), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                  #i: <__main__.instruction instance at 0x1004a0998>
                                  #PUSH<c>.W <registers>
                                  #(1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                                  block:
                                    var M : TBinary = insn[14,14]
                                    var register_list : TBinary = insn[12,0]
                                    return ctx.opSTMIA({}, >SP, ctx.RegList(cat(b"0", M, b"0", register_list)))
                                    nil
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2)]
                  if bit(insn, 20):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                    if not bit(insn, 13):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100491ab8>
                      #LDMDB<c> <Rn>{!},<registers>
                      #(1, 1, 1, 0, 1, 0, 0, 1, 0, 0, None, 1, None, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var W : TBinary = insn[21,21]
                        var Rn : TReg = TReg(insn[19,16].num)
                        var P : TBinary = insn[15,15]
                        var M : TBinary = insn[14,14]
                        var register_list : TBinary = insn[12,0]
                        return ctx.opLDMDB({}, >Rn, ctx.RegList(cat(P, M, b"0", register_list)))
                        nil
                  else: #20
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      if not bit(insn, 13):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 1), (23, 0), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a8c68>
                        #STMDB<c> <Rn>{!},<registers>
                        #(1, 1, 1, 0, 1, 0, 0, 1, 0, 0, None, 0, None, None, None, None, 0, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var W : TBinary = insn[21,21]
                          var Rn : TReg = TReg(insn[19,16].num)
                          var M : TBinary = insn[14,14]
                          var register_list : TBinary = insn[12,0]
                          return ctx.opSTMDB({}, >Rn, ctx.RegList(cat(b"0", M, b"0", register_list)))
                          # XXX XXX 
                          # These are directly copied from LDR without checking the docs...
                          nil
            else: #24
              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0)]
              if bit(insn, 23):
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      if bit(insn, 15):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1)]
                        if bit(insn, 14):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1)]
                          if bit(insn, 13):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1)]
                            if bit(insn, 12):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1)]
                              if not bit(insn, 11):
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0)]
                                if not bit(insn, 10):
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0)]
                                  if not bit(insn, 9):
                                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0)]
                                    if not bit(insn, 8):
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0)]
                                      if not bit(insn, 7):
                                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0)]
                                        if not bit(insn, 6):
                                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0)]
                                          if not bit(insn, 5):
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 2), (3, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 2), (3, 2), (2, 2)]
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 1), (14, 1), (13, 1), (12, 1), (11, 0), (10, 0), (9, 0), (8, 0), (7, 0), (6, 0), (5, 0), (4, 2), (3, 2), (2, 2), (1, 2)]
                                            #i: <__main__.instruction instance at 0x1004af8c0>
                                            #TBH<c> [<Rn>,<Rm>,LSL #1]
                                            #(1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, None, None, None, None, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, None, None, None, None, None)
                                            block:
                                              var Rn : TReg = TReg(insn[19,16].num)
                                              var H : TBinary = insn[4,4]
                                              var Rm : TReg = TReg(insn[3,0].num)
                                              if H.bit:
                                                  return ctx.opTBH({}, ctx.Deref(<Rn, ctx.Shift(<Rm, LSL, <1), 2, true, false, true))
                                              else:
                                                  return ctx.opTBB({}, ctx.Deref(<Rn, <Rm, 1, true, false, true))
                                              nil
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              if not bit(insn, 7):
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0)]
                                if bit(insn, 6):
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1)]
                                  if not bit(insn, 5):
                                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0)]
                                    if bit(insn, 4):
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1)]
                                      if bit(insn, 3):
                                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 1)]
                                        if bit(insn, 2):
                                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 1), (2, 1)]
                                          if bit(insn, 1):
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 1), (2, 1), (1, 1)]
                                            if bit(insn, 0):
                                              #i: <__main__.instruction instance at 0x100495950>
                                              #LDREXH<c> <Rt>, [<Rn>]
                                              #(1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1)
                                              block:
                                                var Rn : TReg = TReg(insn[19,16].num)
                                                var Rt : TReg = TReg(insn[15,12].num)
                                                return ctx.opLDREXH({}, >Rt, ctx.Deref(>Rn, <0, 2, true, false, true))
                                                nil
                                    else: #4
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0)]
                                      if bit(insn, 3):
                                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 1)]
                                        if bit(insn, 2):
                                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 1), (2, 1)]
                                          if bit(insn, 1):
                                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 1), (2, 1), (1, 1)]
                                            if bit(insn, 0):
                                              #i: <__main__.instruction instance at 0x100495878>
                                              #LDREXB<c> <Rt>, [<Rn>]
                                              #(1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1)
                                              block:
                                                var Rn : TReg = TReg(insn[19,16].num)
                                                var Rt : TReg = TReg(insn[15,12].num)
                                                return ctx.opLDREXB({}, >Rt, ctx.Deref(>Rn, <0, 1, true, false, true))
                                                nil
                    else: #20
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              if not bit(insn, 7):
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0)]
                                if bit(insn, 6):
                                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1)]
                                  if not bit(insn, 5):
                                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0)]
                                    if bit(insn, 4):
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2), (2, 2)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 1), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004ab830>
                                      #STREXH<c> <Rd>,<Rt>,[<Rn>]
                                      #(1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, 1, 1, 1, 1, 0, 1, 0, 1, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var Rt : TReg = TReg(insn[15,12].num)
                                        var Rd : TReg = TReg(insn[3,0].num)
                                        return ctx.opSTREXH({}, <Rt, ctx.Deref(>Rn, <0, 2, true, false, true))
                                        nil
                                    else: #4
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2), (2, 2)]
                                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 0), (6, 1), (5, 0), (4, 0), (3, 2), (2, 2), (1, 2)]
                                      #i: <__main__.instruction instance at 0x1004ab758>
                                      #STREXB<c> <Rd>,<Rt>,[<Rn>]
                                      #(1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, None, None, None, None, None, None, None, None, 1, 1, 1, 1, 0, 1, 0, 0, None, None, None, None)
                                      block:
                                        var Rn : TReg = TReg(insn[19,16].num)
                                        var Rt : TReg = TReg(insn[15,12].num)
                                        var Rd : TReg = TReg(insn[3,0].num)
                                        return ctx.opSTREXB({}, <Rt, ctx.Deref(>Rn, <0, 1, true, false, true))
                                        nil
                else: #22
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0)]
                  if bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1)]
                      if bit(insn, 19):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1)]
                        if bit(insn, 18):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1)]
                          if not bit(insn, 17):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0)]
                            if bit(insn, 16):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2)]
                              if not bit(insn, 13):
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 1), (20, 1), (19, 1), (18, 1), (17, 0), (16, 1), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                                #i: <__main__.instruction instance at 0x1004a0878>
                                #POP<c>.W <registers>
                                #(1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                                block:
                                  var P : TBinary = insn[15,15]
                                  var M : TBinary = insn[14,14]
                                  var register_list : TBinary = insn[12,0]
                                  return ctx.opLDMIA({}, >SP, ctx.RegList(cat(P, M, b"0", register_list)))
                                  nil
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2)]
                  if bit(insn, 20):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                    if not bit(insn, 13):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x100491a70>
                      #LDM<c>.W <Rn>{!},<registers>
                      #(1, 1, 1, 0, 1, 0, 0, 0, 1, 0, None, 1, None, None, None, None, None, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var W : TBinary = insn[21,21]
                        var Rn : TReg = TReg(insn[19,16].num)
                        var P : TBinary = insn[15,15]
                        var M : TBinary = insn[14,14]
                        var register_list : TBinary = insn[12,0]
                        if W.bit:
                            return ctx.opLDMIA({}, >Rn, ctx.RegList(cat(P, M, b"0", register_list)))
                        else:
                            return ctx.opLDM({}, <Rn, ctx.RegList(cat(P, M, b"0", register_list)))
                        nil
                  else: #20
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                    if not bit(insn, 15):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2)]
                      if not bit(insn, 13):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 1), (22, 0), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 0), (14, 2), (13, 0), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                        #i: <__main__.instruction instance at 0x1004a8b90>
                        #STM<c>.W <Rn>{!},<registers>
                        #(1, 1, 1, 0, 1, 0, 0, 0, 1, 0, None, 0, None, None, None, None, 0, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None)
                        block:
                          var W : TBinary = insn[21,21]
                          var Rn : TReg = TReg(insn[19,16].num)
                          var M : TBinary = insn[14,14]
                          var register_list : TBinary = insn[12,0]
                          if W.bit:
                              return ctx.opSTMIA({}, >Rn, ctx.RegList(cat(b"0", M, b"0", register_list)))
                          else:
                              return ctx.opSTM({}, <Rn, ctx.RegList(cat(b"0", M, b"0", register_list)))
                          nil
              else: #23
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0)]
                if bit(insn, 22):
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1)]
                  if not bit(insn, 21):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0)]
                    if bit(insn, 20):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      if bit(insn, 11):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1)]
                        if bit(insn, 10):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1)]
                          if bit(insn, 9):
                            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1)]
                            if bit(insn, 8):
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 1), (10, 1), (9, 1), (8, 1), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                              #i: <__main__.instruction instance at 0x100495830>
                              #LDREX<c> <Rt>,[<Rn>{,#<imm8>}]
                              #(1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, None, None, None, None, None, None, None, None, 1, 1, 1, 1, None, None, None, None, None, None, None, None)
                              block:
                                var Rn : TReg = TReg(insn[19,16].num)
                                var Rt : TReg = TReg(insn[15,12].num)
                                var imm8 : TBinary = insn[7,0]
                                return ctx.opLDREX({}, >Rt, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, true, false, true))
                                nil
                    else: #20
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 0), (23, 0), (22, 1), (21, 0), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                      #i: <__main__.instruction instance at 0x1004ab680>
                      #STREX<c> <Rd>,<Rt>,[<Rn>{,#<imm8>}]
                      #(1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                      block:
                        var Rn : TReg = TReg(insn[19,16].num)
                        var Rt : TReg = TReg(insn[15,12].num)
                        var Rd : TReg = TReg(insn[11,8].num)
                        var imm8 : TBinary = insn[7,0]
                        return ctx.opSTREX({}, <Rt, ctx.Deref(>Rn, <cat(imm8, b"00"), 4, true, false, true))
                        nil
            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2)]
            # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2)]
            if bit(insn, 22):
              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1)]
              if not bit(insn, 21):
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0)]
                if bit(insn, 20):
                  # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1)]
                  if bit(insn, 19):
                    # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1)]
                    if bit(insn, 18):
                      # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1)]
                      if bit(insn, 17):
                        # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1)]
                        if bit(insn, 16):
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                          # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 0), (20, 1), (19, 1), (18, 1), (17, 1), (16, 1), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                          #i: <__main__.instruction instance at 0x100495758>
                          #LDRD<c> <Rt>,<Rt2>,[PC,#-0] Special case
                          #(1, 1, 1, 0, 1, 0, 0, None, None, 1, 0, 1, 1, 1, 1, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                          block:
                            var P : TBinary = insn[24,24]
                            var U : TBinary = insn[23,23]
                            var Rt : TReg = TReg(insn[15,12].num)
                            var Rt2 : TReg = TReg(insn[11,8].num)
                            var imm8 : TBinary = insn[7,0]
                            return ctx.opLDRD({}, >Rt, >Rt2, ctx.Deref(>PC, <cat(imm8, b"00"), 8, P.bit, false, U.bit))
                            nil
              # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2)]
              if bit(insn, 20):
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 1), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                #i: <__main__.instruction instance at 0x100495680>
                #LDRD<c> <Rt>,<Rt2>,[<Rn>,#+/-<imm8>]!
                #(1, 1, 1, 0, 1, 0, 0, None, None, 1, None, 1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                block:
                  var P : TBinary = insn[24,24]
                  var U : TBinary = insn[23,23]
                  var W : TBinary = insn[21,21]
                  var Rn : TReg = TReg(insn[19,16].num)
                  var Rt : TReg = TReg(insn[15,12].num)
                  var Rt2 : TReg = TReg(insn[11,8].num)
                  var imm8 : TBinary = insn[7,0]
                  if not P.bit and not W.bit: break
                  if Rn == PC: break
                  return ctx.opLDRD({}, >Rt, >Rt2, ctx.Deref(>Rn, <cat(imm8, b"00"), 8, P.bit, W.bit, U.bit))
                  nil
              else: #20
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2)]
                # [(28, 0), (27, 1), (26, 0), (25, 0), (24, 2), (23, 2), (22, 1), (21, 2), (20, 0), (19, 2), (18, 2), (17, 2), (16, 2), (15, 2), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (2, 2), (1, 2)]
                #i: <__main__.instruction instance at 0x1004ab5a8>
                #STRD<c> <Rt>,<Rt2>,[<Rn>,#+/-<imm8>]!
                #(1, 1, 1, 0, 1, 0, 0, None, None, 1, None, 0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)
                block:
                  var P : TBinary = insn[24,24]
                  var U : TBinary = insn[23,23]
                  var W : TBinary = insn[21,21]
                  var Rn : TReg = TReg(insn[19,16].num)
                  var Rt : TReg = TReg(insn[15,12].num)
                  var Rt2 : TReg = TReg(insn[11,8].num)
                  var imm8 : TBinary = insn[7,0]
                  if not P.bit and not W.bit: break
                  if Rn == PC: break
                  return ctx.opSTRD({}, <Rt, <Rt2, ctx.Deref(>Rn, <cat(imm8, b"00"), 8, P.bit, W.bit, U.bit))
                  nil
 

foreachAC(ctxspec)
